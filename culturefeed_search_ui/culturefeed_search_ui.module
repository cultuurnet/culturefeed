<?php
/**
 * @file
 * Module file for all functionality for CultureFeed Search.
 */

module_load_include('inc', 'culturefeed_search_ui', 'includes/helpers');

/**
 * Constants to define the available pager types.
 */
define("CULTUREFEED_SEARCH_UI_PAGER_NORMAL", 0);
define("CULTUREFEED_SEARCH_UI_PAGER_INFINITE_SCROLL", 1);

define("CULTUREFEED_SEARCH_UI_PAGER_ITEMS_PER_PAGE", 10);

define('CULTUREFEED_SEARCH_SORT_ALPHABETICALLY', 'alphabetically');
define('CULTUREFEED_SEARCH_SORT_TOTAL_RESULTS', 'total_results');
define('CULTUREFEED_SEARCH_TOTAL_FILTER_BLOCKS', 4);

use CultuurNet\Search\Parameter;

/**
 * Implements hook_init().
 */
function culturefeed_search_ui_init() {

  // Redirect to correct slug version, if an old slug was used.
  if ($item = culturefeed_search_get_active_object()) {

    $path = current_path();
    if ($item instanceof CultureFeed_Cdb_Item_Page) {
      $path = culturefeed_search_detail_path('page', $item->getId(), $item->getName());
    }
    elseif ($item->getType() == 'event' || $item->getType() == 'production' || $item->getType() == 'actor') {
      $path = culturefeed_search_detail_path($item->getType(), $item->getId(), $item->getTitle(culturefeed_search_get_preferred_language()));
    }

    if (strpos(current_path(), $path) !== 0) {
      $params = drupal_get_query_parameters();
      drupal_goto($path, array('query' => ($params ? array($params) : NULL)), 301);
    }

  }

  // Redirect old cnapi urls.
  if (variable_get('culturefeed_search_redirect_old_search', FALSE)) {
    culturefeed_search_ui_redirect_cnapi_urls();
  }

  // Set correct metatags.
  $active_page = _culturefeed_search_ui_get_active_search_page();
  if ($active_page) {
    culturefeed_search_ui_set_noindex_metatag();
    culturefeed_search_ui_set_canonical_metatag();
  }

  // Check if we are not on a staging environment
  global $base_root;
  $staging = FALSE;
  $dev_ids = array('culturefeed', 'dev.', 'acc.');
  foreach($dev_ids as $id) {
    if (stripos($base_root, $id) !== FALSE) {
      $staging = TRUE;
    }
  }
  if ($staging) {
    culturefeed_search_set_noindex_metatag();
  }

}

/**
 * Implements hook_cron().
 */
function culturefeed_search_ui_cron() {

  // Only register deletions on production api (otherwise to slow)
  if (strpos(variable_get('culturefeed_search_api_location', CULTUREFEED_SEARCH_API_LOCATION) ,'www') !== false) {
    culturefeed_search_ui_register_deletions();
  }

}

/**
 * Implements hook_menu().
 */
function culturefeed_search_ui_menu() {

  $items = array();

  // Dummy page callback used to redirect the user to the real search page.
  $items['culturefeed/search'] = array(
    'title' => 'Culturefeed search',
    'title callback' => FALSE,
    'page callback' => 'culturefeed_search_ui_search_page',
    'page arguments' => array('submitted'),
    'file' => 'includes/pages.inc',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  foreach (culturefeed_get_searchable_types() as $name => $search_type) {

    $class_name = isset($search_type['class_name']) ? $search_type['class_name'] : 'CultureFeedSearchPage';

    // Menu paths for search.
    $items[$search_type['path']] = array(
      'title' => $search_type['page_title'],
      'title callback' => FALSE,
      'page callback' => 'culturefeed_search_ui_search_page',
      'page arguments' => array($name, $class_name),
      'file' => 'includes/pages.inc',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );
    $arguments = explode('/', $search_type['path']);
    $items[$search_type['path'] . '/%'] = array(
      'title' => $search_type['page_title'],
      'title callback' => FALSE,
      'page callback' => 'culturefeed_search_ui_search_page',
      'page arguments' => array($name, $class_name, count($arguments)),
      'file' => 'includes/pages.inc',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );

  }

  $items['admin/config/culturefeed/search-ui'] = array(
    'title' => 'CultureFeed Search UI',
    'description' => t('CultureFeed Search UI settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_search_ui_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/admin.inc',
  );

  $items['admin/config/culturefeed/search-ui/general'] = array(
    'title' => 'General settings',
    'description' => t('Change CultureFeed Search UI settings like display, filters, â€¦'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/culturefeed/search-ui/sort'] = array(
    'title' => 'Sort settings',
    'description' => t('Change CultureFeed Search UI sort settings.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_search_ui_admin_sort_order_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['autocomplete/culturefeed_ui/city-region-suggestion'] = array(
    'page callback' => 'culturefeed_search_ui_city_suggestion_autocomplete_page',
    'page arguments' => array(3, TRUE),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['autocomplete/culturefeed_ui/city-actor-suggestion'] = array(
    'page callback' => 'culturefeed_search_ui_city_actor_suggestion_autocomplete',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  return $items;

}

/**
 * Implements hook_theme().
 */
function culturefeed_search_ui_theme() {

  $path = drupal_get_path('module', 'culturefeed_search_ui') . '/theme';

  return array(

    'culturefeed_search_page' => array(
      'variables' => array(
        'searchresult' => NULL
      ),
      'template' => 'culturefeed-search-page',
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_search_list' => array(
      'variables' => array(
        'items' => NULL,
        'nowrapper' => FALSE,
      ),
      'template' => 'culturefeed-search-list',
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_search_facet_with_depth_settings' => array(
      'variables' => array(
        'facet' => NULL,
        'items' => array(),
        'title' => NULL,
        'path' => NULL,
        'query' => NULL,
        'sort' => '',
        'highest_level' => 1,
        'show_subitems' => FALSE,
      ),
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_search_facet' => array(
      'variables' => array(
        'facet' => NULL,
        'items' => array(),
        'title' => NULL,
        'path' => NULL,
        'query' => NULL,
        'sort' => '',
      ),
      'template' => 'culturefeed-search-facet',
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_search_facet_eventtype' => array(
      'variables' => array(
        'facet' => NULL,
        'items' => array(),
        'title' => NULL,
        'path' => NULL,
        'query' => NULL,
        'sort' => '',
      ),
      'template' => 'culturefeed-search-facet-eventtype',
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_search_facet_item' => array(
      'variables' => array(
        'facet_item' => NULL,
        'facet_key' => NULL,
        'path' => NULL,
        'query' => NULL,
        'active' => FALSE,
        'has_active_sub_item' => FALSE,
      ),
      'template' => 'culturefeed-search-facet-item',
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_search_active_filters_item' => array(
      'variables' => array(
        'label' => NULL,
        'url' => NULL,
      ),
      'template' => 'culturefeed-search-active-filters-item',
      'path' => $path,
    ),
    'culturefeed_search_pager_summary' => array(
      'variables' => array(
        'result' => NULL,
        'start' => 0,
      ),
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_search_sort_links' => array(
      'variables' => array('type' => ''),
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_search_block_filter_links' => array(
      'variables' => array(
        'filter_options' => array(),
        'query' => '',
        'items' => array(),
        'path' => NULL,
      ),
      'template' => 'culturefeed-search-block-filter-links',
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_search_block_filter_links_item' => array(
      'variables' => array(
        'item' => array(),
        'label'=> '',
        'url' => '',
        'active' => FALSE,
      ),
      'template' => 'culturefeed-search-block-filter-links-item',
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_search_suggestions' => array(
      'variables' => array(
        'suggestions' => array(),
      ),
      'template' => 'culturefeed-search-suggestions',
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_search_parent_region_suggestion' => array(
      'variables' => array(
        'parent_region' => array(),
      ),
      'template' => 'culturefeed-search-parent-region-suggestion',
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_search_ui_admin_filter_form_options' => array(
      'render element' => 'element',
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_search_ui_admin_sort_order_options' => array(
      'render element' => 'element',
      'path' => $path,
      'file' => 'theme.inc',
    ),
  );

}

/**
 * Implements hook_library().
 */
function culturefeed_search_ui_library() {

  $path = drupal_get_path('module', 'culturefeed_search_ui');

  // Date range picker
  $libraries['ui.daterangepicker'] = array(
    'title' => 'Datejs',
    'website' => 'http://filamentgroup.com/lab/date_range_picker_using_jquery_ui_16_and_jquery_ui_css_framework/',
    'version' => '1',
    'js' => array(
      $path . '/js/daterangepicker.jQuery.compressed.js' => array(),
    ),
    'css' => array(
      $path . '/css/ui.daterangepicker.css' => array(),
    ),
    'dependencies' => array(
      array('system', 'ui.datepicker'),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_block_info().
 */
function culturefeed_search_ui_block_info() {
  $blocks = array();

  $blocks['culturefeed-search-box'] = array(
    'info' => t('Culturefeed search: search events and pages'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['culturefeed-search-sortorder'] = array(
    'info' => t('Culturefeed search: sort order'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['culturefeed-search-activefilters'] = array(
    'info' => t('Culturefeed search: active filters'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['culturefeed-search-regionsuggest'] = array(
    'info' => t('Culturefeed search: region suggestion'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['facet-type'] = array(
    'info' => t('Culturefeed search: facet entity type'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['facet-datetype'] = array(
    'info' => t('Culturefeed search: facet when'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['facet-city'] = array(
    'info' => t('Culturefeed search: facet where'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['facet-city-only'] = array(
    'info' => t('Culturefeed search: facet where - search only on cities and zipcodes'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['facet-age-range'] = array(
    'info' => t('Facet: Age range'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['filter-form'] = array(
    'info' => t('Culturefeed search: Filter form'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['location-search'] = array(
    'info' => t('Culturefeed search: location search'),
  );

  for ($i = 2; $i <= CULTUREFEED_SEARCH_TOTAL_FILTER_BLOCKS; $i++) {
    $blocks['filter-form-' . $i] = array(
      'info' => t('Culturefeed search: Filter form !number', array('!number' => $i)),
      'cache' => DRUPAL_NO_CACHE,
    );
  }

  $blocks['facet-holidays'] = array(
    'info' => t('Culturefeed search: facet holidays'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['facet-holidays'] = array(
    'info' => t('Culturefeed search: facet holidays'),
    'cache' => DRUPAL_NO_CACHE,
  );

  // Facet blocks.
  $domains = db_query('SELECT did, label FROM {culturefeed_search_domains}');
  foreach ($domains as $domain) {
    $blocks['facet-' . $domain->did] = array(
      'info' => t('Culturefeed search: facet @label', array('@label' => $domain->label)),
      'cache' => DRUPAL_NO_CACHE,
    );
  }

  return $blocks;

}

/**
 * Implements hook_block_configure().
 */
function culturefeed_search_ui_block_configure($delta) {
  $form = array();

  $delta_parts = explode('-', $delta);
  if ($delta != 'facet-datetype' && $delta != 'facet-holidays' && isset($delta_parts[0]) && $delta_parts[0] == 'facet') {
    $form['sort'] = array(
      '#type' => 'select',
      '#title' => t('Sort facet on'),
      '#options' => array(
        '' => t('Default sorting'),
        CULTUREFEED_SEARCH_SORT_ALPHABETICALLY => t('Alphabetically'),
        CULTUREFEED_SEARCH_SORT_TOTAL_RESULTS => t('Total results')
      ),
      '#default_value' => variable_get('culturefeed_search_sort_' . $delta, CULTUREFEED_SEARCH_SORT_ALPHABETICALLY),
    );
    if (variable_get('culturefeed_search_ui_facet_compatibility_mode', 0) === 0 && $delta != 'facet-city') {
      $form['culturefeed-facet-highest-level'] = array(
        '#type' => 'select',
        '#title' => t('Highest facet level'),
        '#options' => array(
          1 => t('Level 1'),
          2 => t('Level 2'),
          3 => t('Level 3'),
          4 => t('Level 4'),
        ),
        '#description' => t('The highest level of facets to show. Should probably be level 1. If the highest level does not exist, the level above it will be used.'),
        '#default_value' => variable_get('culturefeed_facet_highest_level_' . $delta, 1),
      );
      $form['culturefeed-facet-show-subitems'] = array(
        '#type' => 'checkbox',
        '#title' => t('Show subitems'),
        '#description' => t('Check this if the facets of lower levels should be shown when a facet option is selected.'),
        '#default_value' => variable_get('culturefeed_facet_show_subitems_' . $delta, FALSE),
      );
    }

    // Disable possible facet options.
    // In fact this facility is named "location_category_facility_id" on events.
    if ($delta == 'facet-facility') {

      $options = culturefeed_search_get_categories_by_domain($delta_parts[1]);
      $enabled_options = variable_get('culturefeed_facet_enabled_options', NULL);

      $form['culturefeed-facet-enabled-options'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Show only selected options'),
        '#options' => $options,
        '#default_value' => $enabled_options !== NULL && isset($enabled_options[$delta_parts[1]]) ? $enabled_options[$delta_parts[1]] : array_keys($options),
      );
    }

    if ($delta == 'facet-theme') {
      $form['culturefeed-facet-theme-hide'] = array(
        '#type' => 'checkbox',
        '#title' => t('Show the facet only when an eventtype is chosen'),
        '#default_value' => variable_get('culturefeed_facet_theme_hide', TRUE),
      );
    }

    if ($delta == 'facet-educationfield') {
      $form['culturefeed-facet-educationfield-hide'] = array(
        '#type' => 'checkbox',
        '#title' => t('Show the facet only when an eventtype is chosen'),
        '#default_value' => variable_get('culturefeed_facet_educationfield_hide', TRUE),
      );
    }

    if ($delta == 'facet-city') {

      $form['culturefeed-facet-city-parents'] = array(
        '#tree' => TRUE,
        '#title' => t('Limit autocomplete options to selected parents'),
      );
      $default_value = variable_get('culturefeed_facet_city_parents', array());

      $base_query = db_select('culturefeed_search_terms', 't');
      $base_query->fields('t', array('tid', 'name'));
      // Conditions taken from culturefeed_search_get_flandersregion_suggestions.
      $base_query->condition('language', 'und');
      $base_query->condition('did', 'flandersregion', '=');
      $base_query->orderBy('name');
      // Get only provinces.
      $province_query = clone($base_query);
      $province_query->isNotNull('parent');
      $province_query->execute();
      $provinces = $province_query->execute()->fetchAllKeyed();

      foreach ($provinces as $pkey => $province) {

        $form['culturefeed-facet-city-parents'][$pkey] = array(
          '#type' => 'checkbox',
          '#title' => '<strong>' . $province . '</strong>',
          '#default_value' => in_array($pkey, $default_value),
        );

        // Get only regions.
        $region_query = clone($base_query);
        $region_query->isNull('p2');
        $region_query->isNull('p3');
        $region_query->isNull('p4');
        $region_query->condition('p1', $pkey);
        $region_query->execute();
        $regions = $region_query->execute()->fetchAllKeyed();

        foreach ($regions as $rkey => $region) {

          $form['culturefeed-facet-city-parents'][$rkey] = array(
            '#type' => 'checkbox',
            '#title' => $region,
            '#attributes' => array('style' => 'margin-left: 20px;'),
            '#default_value' => in_array($rkey, $default_value),
          );

        }

      }

    }
  }
  elseif ($delta == 'location-search') {
    $options = culturefeed_search_get_actortype_categories();
    $form['culturefeed-location-search-actortypes'] = array(
      '#title' => t('Available actortype categories.'),
      '#description' => t('Select the actortype categories that can be shown in the autocomplete. If none selected, all actors will be searched.'),
      '#type' => 'checkboxes',
      '#options' => $options,
      '#default_value' => variable_get('culturefeed_location_search_actortypes', array()),
    );
  }
  elseif (strpos($delta, 'filter-form') === 0) {

    $variable_suffix = '';
    $filter_form_number = 1;
    if ($delta !== 'filter-form') {
      $filter_form_number = (int) substr($delta, -1);
      $variable_suffix = '_' . $filter_form_number;
    }

    $form['culturefeed-search-filter-display-options'] = array(
      '#title' => t('How to display the filters'),
      '#description' => t('Select how to display the search filters'),
      '#type' => 'radios',
      '#options' => array(
        'links' => t('As links'),
        'checkboxes' => t('As checkboxes with submit button'),
      ),
      '#default_value' => variable_get('culturefeed_search_filter_display_options' . $variable_suffix, 'checkboxes'),
    );
    $form['culturefeed-search-filter-operator'] = array(
      '#title' => t('How to apply filters on the query'),
      '#description' => t('Select the operator for the search filters'),
      '#type' => 'radios',
      '#options' => array(
        'and' => t('Use AND-operator'),
        'or' => t('Use OR-operator'),
      ),
      '#default_value' => variable_get('culturefeed_search_filter_operator' . $variable_suffix, 'and'),
    );

    $options = variable_get('culturefeed_search_filter_options' . $variable_suffix, culturefeed_search_ui_default_filter_options($filter_form_number));


    $form['culturefeed-search-filter-options'] = array(
      '#type' => 'fieldset',
      '#title' => t('Possible filters'),
      '#theme' => 'culturefeed_search_ui_admin_filter_form_options',
      '#description' => t('<p>
        Define the different filter options you want. Filters that are not exposed are not shown, but will work if added to the querystring<br />Example:<ul>
        <li>Human name: No courses and workshops</li>
        <li>Query string: no-courses-workshops</li>
        <li>Filter query for API: !category_id:0.3.1.0.0</li>
      </p>'),
      '#tree' => TRUE,
    );

    $form['filter-form-variable-suffix'] = array(
      '#type' => 'hidden',
      '#value' => $variable_suffix,
    );

    for ($i = 0; $i < 50; $i++) {
      $form['culturefeed-search-filter-options'][$i]['exposed'] = array(
        '#title' => t('Exposed'),
        '#type' => 'checkbox',
        '#default_value' => isset($options[$i]['exposed']) ? $options[$i]['exposed'] : TRUE
      );
      $form['culturefeed-search-filter-options'][$i]['title'] = array(
        '#title' => t('Human name'),
        '#type' => 'textfield',
        '#default_value' => isset($options[$i]['title']) ? $options[$i]['title'] : ''
      );
      $form['culturefeed-search-filter-options'][$i]['query-string'] = array(
        '#title' => t('Querystring for url'),
        '#type' => 'textfield',
        '#default_value' => isset($options[$i]['query-string']) ? $options[$i]['query-string'] : ''
      );
      $form['culturefeed-search-filter-options'][$i]['api-filter-query'] = array(
        '#title' => t('Filterquery for API'),
        '#type' => 'textfield',
        '#default_value' => isset($options[$i]['api-filter-query']) ? $options[$i]['api-filter-query'] : '',
        '#maxlength' => 255
      );
    }

  }
  else if ($delta == 'facet-holidays') {
    $options = variable_get('culturefeed_search_holidays_options', culturefeed_search_ui_default_holidays_options());
    $config_label = 'culturefeed-search-holidays-options';

    $form[$config_label] = array(
      '#type' => 'fieldset',
      '#title' => t('Possible holidays'),
      '#theme' => 'culturefeed_search_ui_admin_filter_form_options',
      '#description' => t('<p>
        Define the different holidays you want. Holidays that are not exposed are not shown.<br />Example:<ul>
        <li>Human name: Paasvakantie 2016</li>
        <li>Query string: paasvakantie</li>
        <li>Start date: 26/03/2016</li>
        <li>End date: 10/04/2016</li>
      </p>'),
      '#tree' => TRUE,
    );

    for ($i = 0; $i < 8; $i++) {
      $form[$config_label][$i]['exposed'] = array(
        '#title' => t('Exposed'),
        '#type' => 'checkbox',
        '#default_value' => isset($options[$i]['exposed']) ? $options[$i]['exposed'] : TRUE
      );
      $form[$config_label][$i]['holiday'] = array(
        '#title' => t('Holiday'),
        '#type' => 'textfield',
        '#default_value' => isset($options[$i]['holiday']) ? $options[$i]['holiday'] : ''
      );
      $form[$config_label][$i]['query-string'] = array(
        '#title' => t('Querystring for url'),
        '#type' => 'textfield',
        '#default_value' => isset($options[$i]['query-string']) ? $options[$i]['query-string'] : ''
      );
      $form[$config_label][$i]['start-date'] = array(
        '#title' => t('Start date'),
        '#type' => 'date_popup',
        '#date_format' => 'Y-m-d',
        '#default_value' => isset($options[$i]['start-date']) ? $options[$i]['start-date'] : '',
        '#maxlength' => 255
      );
      $form[$config_label][$i]['end-date'] = array(
        '#title' => t('End date'),
        '#type' => 'date_popup',
        '#date_format' => 'Y-m-d',
        '#default_value' => isset($options[$i]['end-date']) ? $options[$i]['end-date'] : '',
        '#maxlength' => 255
      );
    }
  }

  return $form;
}

/**
* Implements hook_block_save().
*/
function culturefeed_search_ui_block_save($delta, $edit = array()) {

  // Search filter blocks.
  if (isset($edit['culturefeed-search-filter-display-options'])) {
    variable_set('culturefeed_search_filter_display_options'  . $edit['filter-form-variable-suffix'], $edit['culturefeed-search-filter-display-options']);
  }

  if (isset($edit['sort'])) {
    variable_set('culturefeed_search_sort_' . $delta, $edit['sort']);
  }
  if (isset($edit['culturefeed-facet-theme-hide'])) {
    variable_set('culturefeed_facet_theme_hide', $edit['culturefeed-facet-theme-hide']);
  }
  if (isset($edit['culturefeed-facet-educationfield-hide'])) {
    variable_set('culturefeed_facet_educationfield_hide', $edit['culturefeed-facet-educationfield-hide']);
  }
  if (isset($edit['culturefeed-facet-city-parents'])) {
    variable_set('culturefeed_facet_city_parents', array_keys(array_filter($edit['culturefeed-facet-city-parents'])));
  }
  if (isset($edit['culturefeed-facet-highest-level'])) {
    variable_set('culturefeed_facet_highest_level_' . $delta, $edit['culturefeed-facet-highest-level']);
  }
  if (isset($edit['culturefeed-facet-show-subitems'])) {
    variable_set('culturefeed_facet_show_subitems_' . $delta, $edit['culturefeed-facet-show-subitems']);
  }

  if (isset($edit['culturefeed-search-filter-operator'])) {
    variable_set('culturefeed_search_filter_operator' . $edit['filter-form-variable-suffix'], $edit['culturefeed-search-filter-operator']);
  }

  if (isset($edit['culturefeed-search-filter-options'])) {
    $options = array();
    foreach ($edit['culturefeed-search-filter-options'] as $option) {
      if (!empty($option['title']) && !empty($option['query-string']) && !empty($option['api-filter-query'])) {
        $options[] = $option;
      }
    }
    variable_set('culturefeed_search_filter_options' . $edit['filter-form-variable-suffix'], $options);
  }
  if (isset($edit['culturefeed-search-holidays-options'])) {
    $options = array();
    foreach ($edit['culturefeed-search-holidays-options'] as $option) {
      if (!empty($option['holiday']) && !empty($option['query-string']) && !empty($option['start-date']) && !empty($option['end-date'])) {
        $option['api-filter-query'] = 'startdate:[' . $option['start-date'] . 'T00:00:00Z TO ' . $option['end-date'] . 'T23:59:59Z]';
        $options[] = $option;
      }
    }
    variable_set('culturefeed_search_holidays_options', $options);
  }
  if (isset($edit['culturefeed-search-holidays-options'])) {
    $options = array();
    foreach ($edit['culturefeed-search-holidays-options'] as $option) {
      if (!empty($option['holiday']) && !empty($option['query-string']) && !empty($option['start-date']) && !empty($option['end-date'])) {
        $option['api-filter-query'] = 'startdate:[' . $option['start-date'] . 'T00:00:00Z TO ' . $option['end-date'] . 'T23:59:59Z]';
        $options[] = $option;
      }
    }
    variable_set('culturefeed_search_holidays_options', $options);
  }

  // Save enabled facet options.
  if (isset($edit['culturefeed-facet-enabled-options'])) {
    $delta_parts = explode('-', $delta);
    $options = variable_get('culturefeed_facet_enabled_options', array());
    $options[$delta_parts[1]] = array_filter($edit['culturefeed-facet-enabled-options']);
    variable_set('culturefeed_facet_enabled_options', $options);
  }

  if (isset($edit['culturefeed-location-search-actortypes'])) {
    variable_set('culturefeed_location_search_actortypes', array_filter($edit['culturefeed-location-search-actortypes']));
  }
}

/**
 * Implements hook_block_view().
 */
function culturefeed_search_ui_block_view($delta) {
  module_load_include('inc', 'culturefeed_search_ui', 'includes/blocks');
  $block = array();

  switch ($delta) {

    case 'culturefeed-search-box':
      $block['content'] = drupal_get_form('culturefeed_search_ui_search_block_form');
      break;

    case 'culturefeed-search-sortorder':

      $search_result = culturefeed_get_search_result();
      if (!$search_result instanceof \Cultuurnet\Search\SearchResult || $search_result->getTotalCount() == 0) {
        return;
      }

      if ($search_page = culturefeed_get_searchable_type_by_path()) {
        $block['content'] = theme('culturefeed_search_sort_links', array('type' => $search_page['id']));
      }

    break;

    case 'culturefeed-search-activefilters':
      $block['subject'] = t('You searched for:');
      $block['content'] = culturefeed_search_ui_search_active_filters_block();
    break;

    case 'culturefeed-search-regionsuggest':
      $block['content'] = culturefeed_search_ui_search_parent_region_suggestion_block();
    break;

    case 'facet-datetype':
      $block = culturefeed_search_ui_block_date_facet();
    break;

    case 'facet-city':
      $block = culturefeed_search_ui_block_city_facet();
    break;

    case 'facet-city-only':
      $block = culturefeed_search_ui_block_city_only_facet();
    break;

    case 'facet-age-range':
      $block = culturefeed_search_ui_block_age_range_facet();
    break;

    case 'facet-type':
      $block = culturefeed_search_ui_block_entity_type_facet();
    break;

    // Search filter form and it's copy.
    case 'filter-form':
    case 'filter-form-2':
    case 'filter-form-3':
    case 'filter-form-4':
      // Don't show block if there are no search results.
      $search_result = culturefeed_get_search_result();
      if (!$search_result instanceof \Cultuurnet\Search\SearchResult || $search_result->getTotalCount() == 0) {
        return;
      }

      $filter_form_number = 1;
      $variable_suffix = '';
      if ($delta !== 'filter-form') {
        $filter_form_number = (int) substr($delta, -1);
        $variable_suffix = '_' . $filter_form_number;
      }

      $display_type = variable_get('culturefeed_search_filter_display_options' . $variable_suffix, 'checkboxes');
      $filter_options = variable_get('culturefeed_search_filter_options' . $variable_suffix, culturefeed_search_ui_default_filter_options($filter_form_number));
      $filter_options = array_filter($filter_options, function($option) {
        return !isset($option['exposed']) || !empty($option['exposed']);
      });
      if (!empty($filter_options)) {
        $block['content'] = culturefeed_search_ui_block_filter_block($filter_options, $display_type, $filter_form_number);
      }
      break;

    case 'facet-holidays':
      // Don't show block if there are no search results.
      $search_result = culturefeed_get_search_result();
      if (!$search_result instanceof \Cultuurnet\Search\SearchResult || $search_result->getTotalCount() == 0) {
        return;
      }

      $filter_options = variable_get('culturefeed_search_holidays_options', culturefeed_search_ui_default_holidays_options());
      foreach($filter_options as $key => $option) {
        if (!$option['exposed']) {
          unset($filter_options[$key]);
        }
      }
      if (!empty($filter_options)) {
        $block['subject'] = t('Holidays');
        $block['content'] = culturefeed_search_ui_block_holidays_facet($filter_options);
      }
      break;

    case 'location-search':
      $block = culturefeed_search_ui_block_location_search();
    break;

    default:
      $delta_parts = explode('-', $delta);
      if (isset($delta_parts[0]) && $delta_parts[0] == 'facet') {

        // Hide theme facet if no eventtype is chosen.
        if ($delta == 'facet-theme' && variable_get('culturefeed_facet_theme_hide', TRUE)) {
          if (!isset($_GET['facet']['category_eventtype_id'])) {
            return $block;
          }
        }

        // Hide theme facet if no eventtype is chosen.
        if ($delta == 'facet-educationfield' && variable_get('culturefeed_facet_educationfield_hide', TRUE)) {
          if (!isset($_GET['facet']['category_eventtype_id'])) {
            return $block;
          }
        }

        $facet_name = 'category_' . $delta_parts[1] . '_id';
        $domain_id = $delta_parts[1];
        $allowed_values = array();
        $block_settings = array(
          'sort' => variable_get('culturefeed_search_sort_' . $delta, CULTUREFEED_SEARCH_SORT_ALPHABETICALLY),
          'highest_level' => variable_get('culturefeed_facet_highest_level_' . $delta, 1),
          'show_subitems' => variable_get('culturefeed_facet_show_subitems_' . $delta, FALSE),
        );

        // Hande "location_category_facility_id" as "facility".
        if ($delta_parts[1] == 'facility') {
          $delta = 'facility';
          $facet_name = 'location_category_facility_id';
          $enabled_options = variable_get('culturefeed_facet_enabled_options', NULL);
          $allowed_values = $enabled_options['facility'];
          $block_settings['intersect'] = TRUE;
        }
        $block = culturefeed_search_ui_search_facets_block($facet_name, $domain_id, $allowed_values, $block_settings);
      }

  }

  return $block;

}

/**
 * Implements hook_culturefeed_search_page_query_alter().
 */
function culturefeed_search_ui_culturefeed_search_page_query_alter(CultureFeedSearchPageInterface $culturefeedSearchPage) {

  // Filter form blocks.
  for ($i = 1; $i <= CULTUREFEED_SEARCH_TOTAL_FILTER_BLOCKS; $i++) {

    if ($i == 1) {
      $filter_variable = 'culturefeed_search_filter_options';
      $operator_variable = 'culturefeed_search_filter_operator';
    }
    else {
      $filter_variable = 'culturefeed_search_filter_options_' . $i;
      $operator_variable = 'culturefeed_search_filter_operator_' . $i;
    }

    culturefeed_search_ui_page_add_query_filters($culturefeedSearchPage,
      variable_get($filter_variable, culturefeed_search_ui_default_filter_options($i)),
      variable_get($operator_variable, 'and')
    );

  }

  culturefeed_search_ui_page_add_query_filters($culturefeedSearchPage,
    variable_get('culturefeed_search_holidays_options', culturefeed_search_ui_default_holidays_options()),
    'or'
    );

  // If group = event and we are looking for movies switch to group = event_production
  if ($culturefeedSearchPage->getGroup() == 'event' && (isset($_GET['facet']['category_eventtype_id']) && in_array('0.50.6.0.0', $_GET['facet']['category_eventtype_id']))) {
    $culturefeedSearchPage->unsetParameter(7);
    $culturefeedSearchPage->addParameter(new Parameter\Parameter('group', 'event_production'));
    $culturefeedSearchPage->setGroup('event_production');
  }

  // If group = event_production exclude productions (already included in group)
  if ($culturefeedSearchPage->getGroup() == 'event_production') {
    $culturefeedSearchPage->addParameter(new Parameter\FilterQuery('!type:production'));
  }

  // Add facet on agefrom and type.
  $facet_component = culturefeed_get_facet_component();
  if ($facet_component) {
    $culturefeedSearchPage->addParameter($facet_component->facetField('agefrom'));
    $culturefeedSearchPage->addParameter($facet_component->facetField('type'));
  }

  // Add min age filter. This is always the requested age and count till 12.
  if (isset($_GET['min_age'])) {

    $age_range_filters = culturefeed_search_ui_get_age_range_facet_options();
    $min_ages = is_array($_GET['min_age']) ? $_GET['min_age'] : array($_GET['min_age']);
    $age_queries = array();
    foreach ($min_ages as $age) {
      if (is_numeric($age) && $age > -1 && isset($age_range_filters[$age])) {
        $age_queries[] = $age_range_filters[$age]['query'];
      }
    }

    $operator = drupal_strtoupper(variable_get('culturefeed_multiple_categories_operator', 'AND'));
    $culturefeedSearchPage->addParameter(new Parameter\FilterQuery(implode(' ' . $operator . ' ', $age_queries)));

  }

  // Add the sorting. When rss is requested we always use creationdate
  $active_page = culturefeed_get_searchable_type_by_path();
  $sorting_options = culturefeed_search_ui_get_sort_options_for_page($active_page);

  if (arg(2) == 'nojs') {
    culturefeed_search_set_noindex_metatag();
  }

  if (!isset($_GET['sort']) && arg(2) != 'rss') {

    if (isset($sorting_options['default']) && isset($sorting_options[$sorting_options['default']])) {
      $culturefeedSearchPage->addParameter(new Parameter\Parameter('sort', $sorting_options[$sorting_options['default']]['query']));
    }
  }
  elseif (arg(2) == 'rss') {
    $culturefeedSearchPage->addParameter(new Parameter\Parameter('sort', 'creationdate desc'));
  }
  else {
    unset($sorting_options['default']);
    foreach ($sorting_options as $option) {
      if ($option['value'] == $_GET['sort']) {
        $culturefeedSearchPage->addParameter(new Parameter\Parameter('sort', $option['query']));
      }
    }
  }

  // If keywords are given, filter the search query with keywords.
  if (!empty($_GET['keyword'])) {
    $culturefeedSearchPage->addParameter(new Parameter\FilterQuery('keywords:' . urldecode($_GET['keyword'])));
  }

}

/**
 * Implements hook_page_alter().
 */
function culturefeed_search_ui_page_alter(&$variables) {

  // Check if the 404 should be 410 (object deleted).
  if (drupal_get_http_header('Status') == '404 Not Found') {

    // Only for event details / production details and page details.
    if (arg(0) == 'permalink' || (arg(0) == 'agenda' && (arg(1) == 'e' || arg(1) == 'p' || arg(1) == 'a'))) {

      $cdbid_arg = arg(0) == 'permalink' ? arg(1) : arg(3);

      // Check if this object was deleted. If it was found, set the 410.
      $cdbid = db_query('SELECT cdbid FROM {culturefeed_search_deleted_objects} WHERE cdbid = :cdbid ', array(
        ':cdbid' => $cdbid_arg,)
      )->fetchField();

      if ($cdbid) {
        $variables['content']['#attached']['drupal_add_http_header'][] = array('Status', '410 Gone');
      }

    }

  }

}

/**
 * Implements hook_metatag_page_cache_cid_parts_alter().
 */
function culturefeed_search_ui_metatag_page_cache_cid_parts_alter(&$cid_parts) {

  // Add active facets to the metatag cid, this is needed for unique titels per active facet.
  $culturefeedFacetingComponent = culturefeed_get_facet_component();
  if (!$culturefeedFacetingComponent instanceof \CultuurNet\Search\Component\Facet\FacetComponent) {
    return;
  }

  // Add the value of every active filter to the metadata cid.
  $active_filters = module_invoke_all('culturefeed_search_ui_active_filters', $culturefeedFacetingComponent);
  if (!empty($active_filters)) {

    $values = array();
    foreach ($active_filters as $key => $active_filter) {

      if (!isset($active_filter['#label'])) {
        foreach ($active_filter as $subkey => $subitem) {
          $values[] = $key . ':' . $subkey;
        }
      }
      else {
        $values[] = $key;
      }

    }

    $cid_parts['active_cf_filters'] = implode(',', $values);

  }

}

/**
 * Implements hook_culturefeed_search_ui_active_filters().
 */
function culturefeed_search_ui_culturefeed_search_ui_active_filters($culturefeedFacetingComponent) {

  static $build = NULL;
  if ($build !== NULL) {
    return $build;
  }

  $query = drupal_get_query_parameters(NULL, array('q', 'page'));
  $path = current_path();
  $build = array();

  // Check the current search term.
  if (!empty($query['search'])) {
    $search_query = $query;
    unset($search_query['search']);
    $url = url($path, array('query' => $search_query));
    $build['item_search'] =  array(
      '#theme' => 'culturefeed_search_active_filters_item',
      '#label' => $query['search'],
      '#url' => $url
    );
  }

  // Check the facets.
  if (!empty($query['facet'])) {

    // Load all possible human names for special facets.
    $human_names = array();
    if (!empty($query['facet']['datetype'])) {
      $human_names['datetype'] = culturefeed_search_ui_get_date_facet_options();
    }

    $facets = $culturefeedFacetingComponent->getFacets();
    // Loop through all active facets, and generate a remove link.
    foreach ($query['facet'] as $active_facet_name => $selected_value) {
      foreach ($selected_value as $key => $value) {
        if (!empty($value)) {
          $inverse = FALSE;
          $search_query = $query;
          unset($search_query['facet'][$active_facet_name][$key]);

          // If this was the only facet. Also remove the global facet key.
          if (empty($search_query['facet'])) {
            unset($search_query['facet']);
          }

          // Check if facet has a '!' in it. Tag it as inverse so we can
          // change the label.
          if(strpos($selected_value[$key],'!') === 0) {
            $selected_value[$key] = substr($selected_value[$key],1);
            $inverse = TRUE;
          }

          // Get translated label from terms.
          $label = culturefeed_search_get_term_translation($selected_value[$key]);

          if ($active_facet_name == 'category_flandersregion_id' && !empty($query['distance'])) {
            $label .= ' + ' . check_plain($query['distance']) . ' km';
            unset($search_query['distance']);
          }

          // add NOT to the label when the value is inverted.
          if($inverse) {
            $label = t('NOT ') . $label;
          }

          // remove facet from query so it works for multiple selections
          $url_query = $search_query;
          $url = url($path, array('query' => $url_query));

          $build['item_' . $active_facet_name][] = array(
            '#theme' => 'culturefeed_search_active_filters_item',
            '#label' => isset($human_names[$active_facet_name][$label]) ? $human_names[$active_facet_name][$label] : $label,
            '#url' => $url
          );

        }
      }
    }
  }

  // Check if user is filtering on date range.
  if (!empty($query['date_range'])) {
    $search_query = $query;
    unset($search_query['date_range']);
    $url = url($path, array('query' => $search_query));
    $build['date_search'] =  array(
      '#theme' => 'culturefeed_search_active_filters_item',
      '#label' => $query['date_range'],
      '#url' => $url
    );
  }

  // Check if user selected 'nearby activities'
  if (!empty($query['nearby']) && !empty($query['coordinates'])) {
    $search_query = $query;
    unset($search_query['nearby']);
    unset($search_query['coordinates']);
    $url = url($path, array('query' => $search_query));
    $build['nearby'] =  array(
      '#theme' => 'culturefeed_search_active_filters_item',
      '#label' => t('Near') . ' ' . check_plain($query['nearby']),
      '#url' => $url
    );
  }

  // Check if user is searching on a location.
  if (!empty($query['location']) && !isset($query['facet']['category_flandersregion_id'])) {
    $search_query = $query;
    unset($search_query['location']);
    $url = url($path, array('query' => $search_query));

    $label = $query['location'];
    if (!empty($query['distance'])) {
      $label .= ' + ' . check_plain($query['distance']) . ' km';
      unset($search_query['distance']);
    }

    $build['location'] =  array(
      '#theme' => 'culturefeed_search_active_filters_item',
      '#label' => $label,
      '#url' => $url
    );
  }

  // Add min age to active facet filters.
  if (isset($query['min_age'])) {

    $age_range_filters = culturefeed_search_ui_get_age_range_facet_options();
    $min_ages = is_array($_GET['min_age']) ? $_GET['min_age'] : array($_GET['min_age']);
    $active_age_filters = array();
    $active_ages = array();
    foreach ($min_ages as $key => $age) {
      if (isset($age_range_filters[$age])) {
        $active_ages[] = t($age_range_filters[$age]['name']);
      }
    }

    $search_query = $query;
    unset($search_query['min_age']);
    $url = url($path, array('query' => $search_query));

    $operator = drupal_strtoupper(variable_get('culturefeed_multiple_categories_operator', 'AND'));
    $build['min-age'] =  array(
      '#theme' => 'culturefeed_search_active_filters_item',
      '#label' => empty($active_ages) ? t('All ages') : implode(' ' . $operator . ' ', $active_ages),
      '#url' => $url
    );
  }

  if (!empty($query['keyword'])) {
    $keyword = $query['keyword'];
    unset($query['keyword']);
    $url = url($path, array('query' => $query));
    $build['keyword'] = array(
      '#theme' => 'culturefeed_search_active_filters_item',
      '#label' => $keyword,
      '#url' => $url
    );
  }

  // Check if form filters are selected.
  $filter_options = array();
  for ($i = 1; $i <= CULTUREFEED_SEARCH_TOTAL_FILTER_BLOCKS; $i++) {

    if ($i == 1) {
      $extra_filter_options = variable_get('culturefeed_search_filter_options', culturefeed_search_ui_default_filter_options($i));
    }
    else {
      $extra_filter_options = variable_get('culturefeed_search_filter_options_' . $i, culturefeed_search_ui_default_filter_options($i));
    }

    $filter_options = array_merge($filter_options, $extra_filter_options);

  }

  foreach ($filter_options as $option) {
    if (!empty($query[$option['query-string']])) {
      $search_query = $query;
      unset($search_query[$option['query-string']]);
      $url = url($path, array('query' => $search_query));
      $build[$option['query-string']] = array(
        '#theme' => 'culturefeed_search_active_filters_item',
        '#label' => t($option['title']),
        '#url' => $url
      );
    }
  }

  return $build;
}

/**
 * Register deleted events / actors / productions.
 */
function culturefeed_search_ui_register_deletions() {

  $last_registration_timestamp = variable_get('culturefeed_search_ui_last_deletion_registration', REQUEST_TIME - (2629743 * 3));
  if ($last_registration_timestamp) {
    $last_registration = date('Y-m-d', $last_registration_timestamp);
  }

  watchdog('culturefeed_search_ui', 'Fetching deleted objects from API for cleanup.', array(), WATCHDOG_INFO);

  $service = culturefeed_get_search_service();

  try {

    $deletions = $service->getDeletions($last_registration, 9999999);
    $deletions = array_unique($deletions);
    foreach ($deletions as $cdbid) {

      $existing = db_query('SELECT cdbid FROM {culturefeed_search_deleted_objects} WHERE cdbid = :cdbid', array(':cdbid' => $cdbid))->fetchField();
      $update = ($existing) ? 'cdbid' : array();

      $record = array();
      $record['cdbid'] = $cdbid;
      $record['deleted'] = $_SERVER['REQUEST_TIME'];

      drupal_write_record('culturefeed_search_deleted_objects', $record, $update);

    }

    watchdog('culturefeed_search_ui', 'Finished registration of deleted objects.', array(), WATCHDOG_INFO);
    variable_set('culturefeed_search_ui_last_deletion_registration', REQUEST_TIME);

  } catch (Exception $e) {
    watchdog('culturefeed_search_ui', 'Failed registration of deleted objects. Retrying again on the next run.', array(), WATCHDOG_ERROR);
  }

}

/**
 * Adds a custom search filter to a search query.
 *
 * @param CultureFeedSearchPageInterface $culturefeedSearchPage
 * @param array $filter_options
 * @param string $operator
 */
function culturefeed_search_ui_page_add_query_filters(CultureFeedSearchPageInterface &$culturefeedSearchPage, $filter_options, $operator = 'and') {

  if ($operator == 'and') {
    foreach ($filter_options as $option) {
      if (!empty($_GET[$option['query-string']])) {
        $culturefeedSearchPage->addParameter(new Parameter\FilterQuery($option['api-filter-query']));
      }
    }
  }
  elseif ($operator == 'or') {
    $filter_queries = array();
    foreach ($filter_options as $option) {
      if (!empty($_GET[$option['query-string']])) {
        $filter_queries[] = $option['api-filter-query'];
      }
    }

    if (!empty($filter_queries)) {
      $culturefeedSearchPage->addParameter(new Parameter\FilterQuery(implode(' OR ', $filter_queries)));
    }

  }

}

/**
 * Implements hook_forms().
 *
 * All filter forms share the same form handler.
 */
function culturefeed_search_ui_forms() {

  $forms = array();
  for ($i = 1; $i <= CULTUREFEED_SEARCH_TOTAL_FILTER_BLOCKS; $i++) {
    $forms['culturefeed_search_ui_block_filter_form_' . $i] = array(
      'callback' => 'culturefeed_search_ui_block_filter_form'
    );
  }

  return $forms;
}

/**
 * Form to filter search queries by webmaster driven settings.
 * @param type $form
 * @param type $form_state
 * @param type $filter_options
 * @return string
 */
function culturefeed_search_ui_block_filter_form($form, $form_state, $filter_options) {

  $form = array();
  $form['filter-options'] = array();

  foreach ($filter_options as $option) {
    $form['filter-options'][$option['query-string']] = array(
      '#type' => 'checkbox',
      '#title' => t($option['title']),
      '#default_value' => !empty($_GET[$option['query-string']])
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Filter')
  );

  return $form;
}

/**
 * Submit the filter form.
 */
function culturefeed_search_ui_block_filter_form_submit($form, &$form_state) {

  $query = drupal_get_query_parameters(NULL, array('q', 'page'));

  foreach ($form['filter-options'] as $key => $option) {
    unset($query[$key]);
    if (!empty($form_state['values'][$key])) {
      $query[$key] = TRUE;
    }
  }

  $form_state['redirect'] = array(
    $_GET['q'],
    array('query' => $query)
  );
}
