<?php
/**
 * @file
 * Hook implementations of CultureFeed Entry UI.
 */

// Category ids needed.
define('CULTUREFEED_ENTRY_UI_EVENTTYPE_CAT_ID_KIJKEN_EN_LUISTEREN', '0.100.0.0.0');
define('CULTUREFEED_ENTRY_UI_EVENTTYPE_CAT_ID_DOEN', '0.100.1.0.0');
define('CULTUREFEED_ENTRY_UI_EVENTTYPE_CAT_ID_BEZOEKEN', '0.100.2.0.0');
define('CULTUREFEED_ENTRY_UI_SYNC_MAX_PASSES_DEFAULT', 20);
define('CULTUREFEED_ENTRY_UI_SYNC_MAX_DURATION_DEFAULT', 120);

/**
 * Implements hook_permission().
 */
function culturefeed_entry_ui_permission() {
  return array(
    'manage object tags' => array(
      'title' => t('Manage object tags'),
      'description' => t('Manage all the tags from the objects on culturefeed (events, actors, ...).'),
    ),
    'manage custom tags' => array(
      'title' => t('Manage custom tags'),
      'description' => t('Manage custom tags from the objects on culturefeed (events, actors, ...) managed on the admin section.'),
    ),
    'create culturefeed events' => array(
      'title' => t('Create events'),
      'description' => t('Create new events through the entity api.'),
    ),
    'edit culturefeed events' => array(
      'title' => t('Edit events'),
      'description' => t('Edit events through the entity api.'),
    ),
    'delete culturefeed events' => array(
      'title' => t('Delete events'),
      'description' => t('Delete events through the entity api.'),
    ),
    'manage culturefeed collaborative info' => array(
      'title' => t('Manage culturefeed collaborative info'),
      'description' => t('Manage culturefeed collaborative info through the entity api.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function culturefeed_entry_ui_theme() {

  return array(
    'culturefeed_entry_ui_event_form' => array(
      'render element' => 'form',
      'template' => 'culturefeed-entry-ui-event-form',
      'path' => drupal_get_path('module', 'culturefeed_entry_ui') . '/theme',
      'file' => 'theme.inc',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function culturefeed_entry_ui_menu() {

  $items = array();

  $tags_form = array(
    'argument' => 'culturefeed_entry_ui_edit_tags_form',
    'file' => 'includes/culturefeed_entry_ui.pages.inc',
  );

  if (culturefeed_entry_ui_is_capable_of_cdbxml_version_3_3()) {
    $tags_form['argument'] = 'culturefeed_entry_ui_edit_tag_objects_form';
    $tags_form['file'] = 'includes/form/culturefeed_entry_ui.tag_objects.inc';
  }

  $items['agenda/e/%/%culturefeed_agenda_event/tags'] = array(
    'title' => 'Tags',
    'page callback' => 'drupal_get_form',
    'page arguments' => array($tags_form['argument'], 3),
    'access callback' => 'culturefeed_entry_ui_manage_tags_access',
    'file' => $tags_form['file'],
  );

  $items['agenda/e/%/%culturefeed_agenda_event/collaboration'] = array(
    'title' => 'Collaboration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_entry_ui_edit_collaboration_data_form', 3),
    'access callback' => 'culturefeed_entry_ui_manage_collaboration_access',
    'file' => 'includes/form/culturefeed_entry_ui.collaboration.inc',
  );

  $items['agenda/e/add'] = array(
    'title' => 'New event',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_entry_ui_event_form'),
    'access arguments' => array('create culturefeed events'),
    'file' => 'includes/culturefeed_entry_ui.pages.inc',
  );

  $items['agenda/e/%/%culturefeed_agenda_event/edit'] = array(
    'title' => 'Edit event',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_entry_ui_event_form', 3),
    'access arguments' => array('edit culturefeed events'),
    'file' => 'includes/culturefeed_entry_ui.pages.inc',
  );

  $items['agenda/e/%/%culturefeed_agenda_event/delete'] = array(
    'title' => 'Delete event',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_entry_ui_delete_event_form', 3),
    'access arguments' => array('delete culturefeed events'),
    'file' => 'includes/culturefeed_entry_ui.pages.inc',
  );

  $items['agenda/e/%/timeout_redirect'] = array(
    'title' => 'Edit event',
    'page callback' => 'culturefeed_entry_ui_event_timeout_redirect',
    'page arguments' => array(2),
    'access arguments' => array('edit culturefeed events'),
    'file' => 'includes/culturefeed_entry_ui.pages.inc',
  );

  $items['admin/config/culturefeed/entry_ui'] = array(
    'title' => 'CultureFeed Entry UI',
    'description' => 'All configurations to entry api for this site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_entry_ui_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/culturefeed_entry_ui.admin.inc',
  );

  return $items;

}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function culturefeed_entry_ui_menu_local_tasks_alter(&$data, $router_item, $root_path) {

  $id = '';
  if (arg(0) == 'agenda' && arg(1) == 'e') {
    $id = arg(3);
  }
  if (!$id) {
    return;
  }

  $event = entry_api_event_load($id);
  $title = $event->getDetails()->getDetailByLanguage(culturefeed_search_get_preferred_language())->getTitle();
  $request_detail = array(
    'event' => $id,
    'title' => $title,
  );
  $path = culturefeed_search_detail_path('event', $id, $title);

  $tabs = array();
  // Add a tab for managing the tags.
  if (culturefeed_entry_ui_manage_tags_access()) {

    $link = array(
      'href' => $path . '/tags',
      'localized_options' => array(),
      'title' => t('Tags'),
    );

    $tabs[] = array(
      '#theme' => 'menu_local_task',
      '#link' => $link,
      '#active' => arg(4) === 'tags',
    );
  }

  // Add tab for collaboration info.
  if (culturefeed_entry_ui_manage_collaboration_access()) {

    $link = array(
      'href' => $path . '/collaboration',
      'localized_options' => array(),
      'title' => t('Collaboration'),
    );

    $tabs[] = array(
      '#theme' => 'menu_local_task',
      '#link' => $link,
      '#active' => arg(4) === 'collaboration',
    );
  }

  $culturefeed_user = DrupalCultureFeed::getLoggedInUser();
  if ($culturefeed_user && user_access('edit culturefeed events')) {
    $udb_permission = Drupalculturefeed_EntryApi::checkPermission($culturefeed_user->id, $culturefeed_user->mbox, array('ids' => $event->getCdbId()));
  }

  // Add tab for editing the event.
  if (user_access('edit culturefeed events') && ($event->getCreatedBy() == $culturefeed_user->mbox || (isset($udb_permission) && $udb_permission[$event->getCdbId()] == 'true'))) {

    $link = array(
      'href' => $path . '/edit',
      'localized_options' => array(),
      'title' => t('Edit'),
    );

    $tabs[] = array(
      '#theme' => 'menu_local_task',
      '#link' => $link,
      '#active' => arg(4) === 'edit',
    );
  }

  // Detail only exists when culturefeed_agenda is enabled.
  if ($tabs && module_exists('culturefeed_agenda')) {

    $request_detail = array(
      'event' => $id,
      'title' => $title,
    );

    $link = array(
      'href' => $path,
      'localized_options' => array(),
      'title' => t('View'),
    );
    $tab = array(
      '#theme' => 'menu_local_task',
      '#link' => $link,
      '#active' => empty(arg(4)),
    );
    array_unshift($tabs, $tab);

  }

  // Clean state to start with.
  if (empty($data['tabs'])) {
    $data['tabs'] = array(
      0 => array(
        'output' => array(),
        'count' => 0,
      ),
    );
  }

  $data['tabs'][0]['output'] = array_merge($data['tabs'][0]['output'], $tabs);
  $data['tabs'][0]['count'] += count($tabs);
}

/**
 * Load an event on the entry api.
 */
function entry_api_event_load($id) {

  static $events = array();
  if (isset($events[$id])) {
    return $events[$id];
  }

  try {
    $events[$id] = Drupalculturefeed_EntryApi::getEvent($id);
    return $events[$id];
  }
  catch (Exception $e) {
    watchdog_exception('culturefeed_entry_ui', $e, array(), WATCHDOG_ERROR);
  }

  $events[$id] = FALSE;

  return FALSE;

}

/**
 * Access callback, to check if a user has access to the manage tags screen.
 */
function culturefeed_entry_ui_manage_tags_access() {
  return user_access('manage custom tags') || user_access('manage object tags');
}

/**
 * Access callback, to check if a user has access to the manage collaboration screen.
 *
 * The collaboration screen will only work properly if also the search module
 * is configured to use cdb xml version 3.3.
 */
function culturefeed_entry_ui_manage_collaboration_access() {
  return
    culturefeed_entry_ui_is_capable_of_cdbxml_version_3_3() &&
    user_access('manage culturefeed collaborative info');
}

function culturefeed_entry_ui_is_capable_of_cdbxml_version_3_3() {
  return
    version_compare(
      variable_get('culturefeed_search_cdb_version', CULTUREFEED_SEARCH_CDB_DEFAULT_VERSION),
      '3.3',
      '>='
    ) &&
    version_compare(
      variable_get('culturefeed_cdb_version', CULTUREFEED_CDB_DEFAULT_VERSION),
      '3.3',
      '>='
    );
}

/**
 * Submit callback for the 'add more' buttons.
 */
function culturefeed_entry_ui_add_more_submit($form, &$form_state) {

  switch ($form_state['input']['_triggering_element_name']) {

    case 'links_add_more':
      $form_state['#links_needed'] = count(element_children($form['extra']['links'])) + 1;
      break;

    case 'opening_times_add_more':
      $form_state['#opening_times_needed'] = count(element_children($form['basic']['when']['period_or_permanent']['opening_times']['monday'])) + 1;
      break;

    case 'ld_add_more':
      $form_state['#ld_needed'] = TRUE;
      break;

    case 'price_add_more':
      $form_state['#price_needed'] = TRUE;
      break;

    case 'actor_add_more':
      $form_state['#actor_needed'] = TRUE;
      if (isset($form_state['input']['organiser']['actor']['organiser_actor_label']) && $form_state['input']['organiser']['actor']['organiser_actor_label']) {
        $form_state['#actor_label'] = $form_state['input']['organiser']['actor']['organiser_actor_label'];
      }
      break;

    case 'performers_add_more':
      $form_state['#performers_needed'] = count(element_children($form['extra']['performers']['wrapper']));
      break;

    case 'contacts_add_more':
      $form_state['#contacts_needed'] = count(element_children($form['extra']['contacts']['wrapper']));
      break;

    case 'languages_add_more':
      $form_state['#languages_needed'] = count(element_children($form['extra']['language']['wrapper']));
      break;

  }

  $form_state['rebuild'] = TRUE;

}

/**
 * Ajax form callback: Add a new row.
 *
 * Return the element that was set in the submit.
 */
function culturefeed_entry_ui_add_more_js($form, $form_state) {

  switch ($form_state['input']['_triggering_element_name']) {

    case 'links_add_more':
      return $form['extra']['links'];

    case 'opening_times_add_more':
      return $form['basic']['period_or_permanent']['opening_times'];

    case 'price_add_more':
      return $form['extra']['price']['extra'];

    case 'ld_add_more':
      return $form['extra']['description']['ld'];

    case 'actor_add_more':
      return $form['extra']['organiser'];

    case 'performers_add_more':
      return $form['extra']['performers']['wrapper'];

    case 'contacts_add_more':
      return $form['extra']['contacts']['wrapper'];

    case 'languages_add_more':
      return $form['extra']['language']['wrapper'];

    case 'organiser_actor_id':
      return $form['extra']['organiser']['actor'];
  }

}

/**
 * Get the language preferred for input on the Entry API.
 */
function culturefeed_entry_ui_get_preferred_language() {
  $language = variable_get('culturefeed_entry_ui_preferred_language', '');

  if (!$language) {
    $language = culturefeed_search_get_preferred_language();
  }

  return $language;
}

/**
 * Implements hook_views_api().
 */
function culturefeed_entry_ui_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module','culturefeed_entry_ui') . '/views',
  );
}

function culturefeed_entry_ui_entity_path(\CultuurNet\Search\ActivityStatsExtendedEntity $entity, $op) {

  if ($entity->getType() == 'event') {
    $id = $entity->getId();
    $entity = $entity->getEntity();
    $details = $entity->getDetails()->getDetailByLanguage(culturefeed_search_get_preferred_language());
    $name = $details->getTitle();
    $path = culturefeed_search_detail_path('event', $id, $name);
    return "{$path}/{$op}";
  }
}

/**
 * Implements hook_block_info_alter().
 */
function culturefeed_entry_ui_block_info_alter(&$blocks, $theme, $code_blocks) {
  $delta = '4abc71e4bcf51672335a80c2c3b6023e';
  if (isset($blocks[$delta])) {
    $block[$delta]['region'] = 'sidebar_second';
    $block[$delta]['status'] = 1;
  }
}

function culturefeed_entry_ui_remove_filter_input(&$form) {

  unset($form['format']['guidelines']);
  unset($form['format']['help']);
  return $form;
}

/**
 * Implements hook_culturefeed_ui_profile_box_main_items().
 */
function culturefeed_entry_ui_culturefeed_ui_profile_box_main_items() {

  $items = array();
  try {

    $items['entry'] = array(
      'data' => l(t('Add event'),'agenda/e/add'),
      'class' => 'entry',
      'weight' => -10,
    );

  } catch (Exception $e) {
    watchdog_exception('culturefeed_entry_ui', $e);
  }

  return $items;
}

/**
 * Validation function for some textarea form elements.
 */
function culturefeed_entry_ui_validate_textarea_markup($element, &$form_state, $form) {
  $value = drupal_array_get_nested_value($form_state['values'], $element['#parents'], $key_exists);
  if ($key_exists) {
    // Remember the original value.
    $original_value = $value;

    // Only allow the following tags.
    $allowed_tags = array('a', 'em', 'strong', 'ul', 'ol', 'li', 'hr');
    $value = filter_xss($value, $allowed_tags);
    // Let the user know if we removed any tags.
    if ($original_value != $value) {
      drupal_set_message(t(
        'Some disallowed html tags will be removed in the %field_name field. The allowed tags are %allowed_tags',
        array(
          '%field_name' => $element['#title'],
          '%allowed_tags' => implode(', ', $allowed_tags),
        )
      ), 'warning');
    }

    // Replace newlines by <p> and <br />.
    $value = _filter_autop($value);

    // Put the altered value back in the form state array.
    drupal_array_set_nested_value($form_state['values'], $element['#parents'], $value);
  }
}
