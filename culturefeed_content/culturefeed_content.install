<?php

/**
 * @file
 * Contains culturefeed_content.install.
 */

/**
 * Implements hook_field_schema().
 */
function culturefeed_content_field_schema($field) {

  if ($field['type'] == 'culturefeed_content') {

    return array(
      'columns' => array(
        'filter_query' => array(
          'type' => 'text',
          'size' => 'medium',
        ),
        'query_string' => array(
          'type' => 'text',
          'size' => 'medium',
        ),
        'types' => array(
          'type' => 'text',
          'size' => 'medium',
        ),
        'rows' => array(
          'type' => 'int',
          'size' => 'medium',
        ),
        'sort' => array(
          'type' => 'text',
          'size' => 'medium',
        ),
        'title' => array(
          'type' => 'text',
          'size' => 'medium',
        ),
        'types' => array(
          'type' => 'varchar',
          'length' => '255',
        ),
        'what_categories' => array(
          'type' => 'text',
          'size' => 'medium',
        ),
        'where_type' => array(
          'type' => 'varchar',
          'length' => '255',
        ),
        'where_equal' => array(
          'type' => 'int',
          'size' => 'tiny',
        ),
        'where_region' => array(
          'type' => 'varchar',
          'length' => '255',
        ),
        'where_city' => array(
          'type' => 'varchar',
          'length' => '255',
        ),
        'where_postal_code' => array(
          'type' => 'int',
        ),
        'where_postal_code_radius' => array(
          'type' => 'int',
        ),
        'when_type_1' => array(
          'type' => 'varchar',
          'length' => '255',
        ),
        'when_before_after_1' => array(
          'type' => 'int',
          'size' => 'tiny',
        ),
        'when_date_1' => array(
          'type' => 'datetime',
          'mysql_type' => 'datetime',
        ),
        'when_type_2' => array(
          'type' => 'varchar',
          'length' => '255',
        ),
        'when_before_after_2' => array(
          'type' => 'int',
          'size' => 'tiny',
        ),
        'when_date_2' => array(
          'type' => 'datetime',
          'mysql_type' => 'datetime',
        ),
        'composite_query' => array(
          'type' => 'text',
          'size' => 'medium',
        ),
        'query_title' => array(
          'type' => 'varchar',
          'length' => '255',
        ),
        'show_postal_code_search_box' => array(
          'type' => 'int',
          'size' => 'tiny',
        ),
      ),
    );

  }

}

/**
 * Returns all fields created on the system of the type defined in culturefeed_content.
 */
function culturefeed_content_get_culturefeed_content_fields() {
  $types = array_keys(culturefeed_content_field_info());
  $fields = array();
  foreach (field_info_fields() as $field) {
    if (in_array($field['type'], $types)) {
      $fields[] = $field;
    }
  }
  return $fields;
}

/**
 * Add title, show_more_link and more link fields to field data and revision tables.
 */
function culturefeed_content_update_7001() {
  $fields = culturefeed_content_get_culturefeed_content_fields();

  foreach ($fields as $field) {
    $table_prefixes = array(
      _field_sql_storage_tablename($field),
      _field_sql_storage_revision_tablename($field)
    );

    foreach ($table_prefixes as $table_prefix) {

      $field_name = $field['field_name'];
      $table = $table_prefix;

      $title = array(
        'type' => 'text',
        'size' => 'medium',
      );
      db_add_field($table, $field_name . '_title', $title);

      $show_more_link = array(
        'type' => 'int',
        'default' => 1
      );
      db_add_field($table, $field_name . '_show_more_link', $show_more_link);

      $more_link = array(
        'type' => 'text',
        'size' => 'medium',
      );
      db_add_field($table, $field_name . '_more_link', $more_link);
    }
  }
  return t('Database columns title, show_more_link and more link were added in the database.');
}

/**
 * Add title, show_more_link and more link fields to field data and revision tables.
 */
function culturefeed_content_update_7002() {
  $fields = culturefeed_content_get_culturefeed_content_fields();

  foreach ($fields as $field) {
    $table_prefixes = array(
      _field_sql_storage_tablename($field),
      _field_sql_storage_revision_tablename($field)
    );

    foreach ($table_prefixes as $table_prefix) {

      $field_name = $field['field_name'];
      $table = $table_prefix;

      $types = array(
        'type' => 'text',
        'size' => 'medium',
      );
      db_add_field($table, $field_name . '_types', $types);
    }
  }
  return t('Types column was added to the database.');
}

/**
 * Add new query builder fields and remove old show_more and more link fields.
 */
function culturefeed_content_update_7003() {
  $fields = culturefeed_content_get_culturefeed_content_fields();

    foreach ($fields as $field) {
      $table_prefixes = array(
        _field_sql_storage_tablename($field),
        _field_sql_storage_revision_tablename($field)
      );

      foreach ($table_prefixes as $table_prefix) {
        $field_name = $field['field_name'];
        $table = $table_prefix;

        // Add new field columns.

        if (!db_field_exists($table, $field_name . '_types')) {
          // Multiple checkbox field -> saved as a combined csv string.
          $types = array(
            'type' => 'text',
            'size' => 'medium',
          );
          db_add_field($table, $field_name . '_types', $types);
        }

        // Infinite fields -> saved as single combined value that gets converted back to form values when needed.
        $what_categories = array(
          'type' => 'text',
          'size' => 'medium',
        );
        db_add_field($table, $field_name . '_what_categories', $what_categories);

        $where_type = array(
          'type' => 'varchar',
          'length' => '255',
        );
        db_add_field($table, $field_name . '_where_type', $where_type);

        $where_equal = array(
          'type' => 'int',
          'size' => 'tiny',
        );
        db_add_field($table, $field_name . '_where_equal', $where_equal);

        $where_region = array(
          'type' => 'varchar',
          'length' => '255',
        );
        db_add_field($table, $field_name . '_where_region', $where_region);

        $where_city = array(
          'type' => 'varchar',
          'length' => '255',
        );
        db_add_field($table, $field_name . '_where_city', $where_city);

        $where_postal_code = array(
          'type' => 'int',
        );
        db_add_field($table, $field_name . '_where_postal_code', $where_postal_code);

        $where_postal_code_radius = array(
          'type' => 'int',
        );
        db_add_field($table, $field_name . '_where_postal_code_radius', $where_postal_code_radius);

        $when_type_1 = array(
          'type' => 'varchar',
          'length' => '255',
        );
        db_add_field($table, $field_name . '_when_type_1', $when_type_1);

        $when_before_after_1 = array(
          'type' => 'int',
          'size' => 'tiny',
        );
        db_add_field($table, $field_name . '_when_before_after_1', $when_before_after_1);

        $when_date_1 = array(
          'type' => 'datetime',
          'mysql_type' => 'datetime',
        );
        db_add_field($table, $field_name . '_when_date_1', $when_date_1);

        $when_type_2 = array(
          'type' => 'varchar',
          'length' => '255',
        );
        db_add_field($table, $field_name . '_when_type_2', $when_type_2);

        $when_before_after_2 = array(
          'type' => 'int',
          'size' => 'tiny',
        );
        db_add_field($table, $field_name . '_when_before_after_2', $when_before_after_2);

        $when_date_2 = array(
          'type' => 'datetime',
          'mysql_type' => 'datetime',
        );
        db_add_field($table, $field_name . '_when_date_2', $when_date_2);

        $composite_query = array(
          'type' => 'text',
          'size' => 'medium',
        );
        db_add_field($table, $field_name . '_composite_query', $composite_query);

        $query_title = array(
          'type' => 'varchar',
          'length' => '255',
        );
        db_add_field($table, $field_name . '_query_title', $query_title);

        $show_postal_code_search_box = array(
          'type' => 'int',
          'size' => 'tiny',
        );
        db_add_field($table, $field_name . '_show_postal_code_search_box', $show_postal_code_search_box);

        // Remove obsolete fields.
        db_drop_field($table, $field_name . '_show_more_link');
        db_drop_field($table, $field_name . '_more_link');
      }
    }
    return t('Query builder fields were added in the database. "Show more" and "more" link fields were removed.');
}

/**
 * Update the query builder field instance.
 */
function culturefeed_content_update_7004() {
  $instance = field_info_instance('node', 'field_zoekopdracht_cf', 'uit_tip');

  // Set some default values.
  $instance['default_value'] = array(
    array(
      'rows' => CULTUREFEED_CONTENT_DEFAULT_ROWS,
      'sort' => CULTUREFEED_CONTENT_DEFAULT_SORT,
      'title' => CULTUREFEED_CONTENT_DEFAULT_TITLE,
    ),
  );

  field_update_instance($instance);
}
