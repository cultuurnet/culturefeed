<?php

/**
 * @file
 * Contains culturefeed_content.module.
 */

define('CULTUREFEED_CONTENT_DEFAULT_ROWS', 10);
define('CULTUREFEED_CONTENT_DEFAULT_SORT', 'date');
define('CULTUREFEED_CONTENT_DEFAULT_TITLE', t('Our selection'));

require_once 'includes/helpers.inc';

/**
 * Implements hook_field_create_instance().
 */
function culturefeed_content_field_create_instance($instance) {
  if ($instance['widget']['type'] == 'culturefeed_content_default') {
    // Set some default values.
    $instance['default_value'] = array(
      array(
        'rows' => CULTUREFEED_CONTENT_DEFAULT_ROWS,
        'sort' => CULTUREFEED_CONTENT_DEFAULT_SORT,
        'title' => CULTUREFEED_CONTENT_DEFAULT_TITLE,
      ),
    );
    field_update_instance($instance);
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function culturefeed_content_field_formatter_info() {
  return array(
    'culturefeed_content_default' => array(
      'label' => t('Default CultureFeed content formatter'),
      'field types' => array('culturefeed_content'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function culturefeed_content_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'culturefeed_content_default':
      foreach ($items as $delta => $item) {
        $title = $item['title'];
        $sort = isset($item['sort']) ? $item['sort'] : CULTUREFEED_CONTENT_DEFAULT_SORT;

        // Render the results.
        $build = array();
        $query = [];
        $query['advanced_query']['title'] = $item['query_title'];
        $query['advanced_query']['query'] = $item['composite_query'];
        $query['sort'] = $sort;

        if ($item['show_postal_code_search_box']) {
          $build[] = drupal_get_form('culturefeed_content_contextual_search_box_form', $item);
        }
        elseif ($result = _culturefeed_content_get_results($item)) {
          $build[] = array(
            '#theme' => 'culturefeed_content_result_list',
            '#title' => $title,
            '#search_result' => $result,
            '#query' => $query,
          );
        }

        $element[$delta] = $build;
      }

      break;
  }

  return $element;
}

/**
 * Implements hook_field_info().
 */
function culturefeed_content_field_info() {
  return array(
    'culturefeed_content' => array(
      'label' => t('CultureFeed content'),
      'description' => t('Renders a CultureFeed search.'),
      'settings' => array(),
      'default_widget' => 'culturefeed_content_default',
      'default_formatter' => 'culturefeed_content_default',
    ),
  );

}

/**
 * Implements hook_field_is_empty().
 */
function culturefeed_content_field_is_empty($item, $field) {
  if (empty($item)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_field_widget_form().
 */
function culturefeed_content_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $title = isset($items[$delta]['title']) ? $items[$delta]['title'] : '';
  $query_string = isset($items[$delta]['query_string']) ? $items[$delta]['query_string'] : '';
  $filter_query = isset($items[$delta]['filter_query']) ? $items[$delta]['filter_query'] : '';
  $rows = isset($items[$delta]['rows']) ? $items[$delta]['rows'] : '';
  $sort = isset($items[$delta]['sort']) ? $items[$delta]['sort'] : '';
  $where_type = isset($items[$delta]['where_type']) ? $items[$delta]['where_type'] : 'all';
  $where_equal = isset($items[$delta]['where_equal']) ? $items[$delta]['where_equal'] : 0;
  $where_region = isset($items[$delta]['where_region']) ? $items[$delta]['where_region'] : '';
  $where_city = isset($items[$delta]['where_city']) ? $items[$delta]['where_city'] : '';
  $where_postal_code = isset($items[$delta]['where_postal_code']) ? $items[$delta]['where_postal_code'] : '';
  $where_postal_code_radius = isset($items[$delta]['where_postal_code_radius']) ? $items[$delta]['where_postal_code_radius'] : 5;
  $when_type_1 = isset($items[$delta]['when_type_1']) ? $items[$delta]['when_type_1'] : 'all';

  if ($when_type_1 !== 'all') {
    $when_date_1 = isset($items[$delta]['when_date_1']) ? $items[$delta]['when_date_1'] : '';
  }
  else {
    $when_date_1 = '';
  }

  $when_before_after_1 = isset($items[$delta]['when_before_after_1']) ? $items[$delta]['when_before_after_1'] : 0;
  $when_type_2 = isset($items[$delta]['when_type_2']) ? $items[$delta]['when_type_2'] : 'all';

  if ($when_type_1 !== 'all') {
    $when_date_2 = isset($items[$delta]['when_date_2']) ? $items[$delta]['when_date_2'] : '';
  }
  else {
    $when_date_2 = '';
  }

  $when_before_after_2 = isset($items[$delta]['when_before_after_2']) ? $items[$delta]['when_before_after_2'] : 0;
  $query_title = isset($items[$delta]['query_title']) ? $items[$delta]['query_title'] : '';
  $show_postal_code_search_box = isset($items[$delta]['show_postal_code_search_box']) ? $items[$delta]['show_postal_code_search_box'] : '';

  // Return types CSV to array.
  $types = isset($items[$delta]['types']) ? explode(',', $items[$delta]['types']) : [];

  // Build base field name based on correct nesting.
  $field_parents = $element['#field_parents'];
  $field_name = $element['#field_name'];
  $language = $element['#language'];
  $parents = $field_name_base_children = array_merge($field_parents, array($field_name, $language, $delta));

  if (empty($field_parents)) {
    $field_name_base = $field_name_base_children[0];
  }
  else {
    $field_name_base = $field_parents[0];
  }

  unset($field_name_base_children[0]);
  $field_name_base .= '[' . implode('][', $field_name_base_children) . ']';

  // Set the form_state values for the first time,
  // as the form is being built from the form state values.
  $form_state_values = isset($form_state['values']) ? $form_state['values'] : array();
  $values = drupal_array_get_nested_value($form_state_values, $parents);

  if (empty($values)) {
    // Initialize the form_state values.
    if (!isset($form_state['values'])) {
      $form_state['values'] = array();
    }

    $item = $items[$delta];

    // What fields are stored as serialiazed string.
    $item['what'] = !empty($item['what_categories']) ? unserialize($item['what_categories']) : array();
    unset($item['what_categories']);

    // All values need to go in the wrapper, and we need to rebuild the structure of the form here.
    $item = [
      'wrapper' => $item,
    ];

    $item['wrapper']['where'] = [
      'where_type' => $where_type,
      'where_equal' => $where_equal,
      'where_region' => $where_region,
      'where_city' => $where_city,
      'where_postal_code' => $where_postal_code,
      'where_postal_code_radius' => $where_postal_code_radius,
    ];

    $item['wrapper']['when'] = [
      'when_type_1' => $when_type_1,
      'when_date_1' => $when_date_1,
      'when_before_after_1' => $when_before_after_1,
      'when_type_2' => $when_type_2,
      'when_date_2' => $when_date_2,
      'when_before_after_2' => $when_before_after_2,
    ];

    $item['wrapper']['types'] = array_filter($types);

    drupal_array_set_nested_value($form_state['values'], $parents, $item);
  }

  // Determine correctly nested id's.
  $field_wrapper_id = implode('-', $field_parents) . '-field-wrapper';
  $composite_query_field_id = implode('-', $field_parents) . '-composite-query-wrapper';
  $category_fieldset_id = implode('-', $field_parents) . '-categories-wrapper';

  $element['wrapper'] = array(
    '#title' => t('CultureFeed content'),
    '#type' => 'fieldset',
    '#id' => $field_wrapper_id,
  );

  $element['wrapper']['title'] = array(
    '#default_value' => $title,
    '#required' => $element['#required'],
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#maxlength' => 255,
  );

  $element['wrapper']['query_string'] = array(
    '#default_value' => $query_string,
    '#required' => $element['#required'],
    '#title' => t('Keywords'),
    '#description' => t('Use * as a wildcard to search on parts of a word, e.g. <strong>*speeltuin, sinterklaas*</strong>.<br> Combine multiple terms with AND, OR and through using brackets, e.g. <strong>(workshop OR cursus) AND keramiek*</strong>.<br> Exact combinations need to use double qoutes, e.g. <strong>"dag van de wetenschap"</strong>.'),
    '#type' => 'textfield',
    '#maxlength' => 1000,
  );

  $element['wrapper']['filter_query'] = array(
    '#default_value' => $filter_query,
    '#required' => $element['#required'],
    '#title' => t('Custom filters'),
    '#description' => t('Add extra parameters or your own advanced filter query, e.g. price:0 or hasimage:true'),
    '#type' => 'textfield',
    '#maxlength' => 1000,
  );

  $element['wrapper']['rows'] = array(
    '#default_value' => $rows,
    '#required' => $element['#required'],
    '#title' => t('Rows'),
    '#description' => t('Number of results to show, defaults to "@default_rows"', ['@default_rows' => CULTUREFEED_CONTENT_DEFAULT_ROWS]),
    '#type' => 'textfield',
  );

  // Sort.
  $search_type = culturefeed_get_searchable_type('activiteiten');
  $sort_options = culturefeed_search_ui_get_sort_options_for_page($search_type);
  $options = array();

  foreach ($sort_options as $key => $option) {

    if ($key === 'default') {
      continue;
    }
    $options[$option['value']] = $option['label'];

  }

  $element['wrapper']['sort'] = array(
    '#default_value' => $sort,
    '#options' => $options,
    '#required' => $element['#required'],
    '#title' => t('Sort'),
    '#type' => 'radios',
  );

  $element['wrapper']['types'] = array(
    '#type' => 'checkboxes',
    '#options' => [
      'event' => t('Event'),
      'actor' => t('Actor'),
      'production' => t('Production')
    ],
    '#description' => t('Selecting none means that all types will be shown.'),
    '#default_value' => $types,
    '#title' => t('Type'),
    '#required' => $element['#required'],
  );

  // "Categories" fieldset (What)
  $element['wrapper']['what'] = array(
    '#title' => t('Categories'),
    '#type' => 'fieldset',
    '#attributes' => ['class' => ['fieldset-query-builder']],
    '#prefix' => '<div id="' . $category_fieldset_id . '">',
    '#suffix' => '</div>',
  );

  // Convert the "what" form_state object to rows.
  $what_parents = array_merge($parents, ['wrapper', 'what']);
  $what_value = drupal_array_get_nested_value($form_state['values'], $what_parents);

  $what_category_rows = _culturefeed_content_convert_categories_to_rows($what_value ? $what_value : array());

  // Add rows to the existing element.
  if (!empty($what_category_rows)) {
    foreach($what_category_rows as $i => $values) {
      $element = _culturefeed_content_add_builder_category_row($element, $field_name_base, $i, $values, $composite_query_field_id);
    }
  } else {
    // Add an empty element to start with.
    $element = _culturefeed_content_add_builder_category_row($element, $field_name_base, 0, [], $composite_query_field_id);
  }

  // Remove category buttons.
  if (is_array($element['wrapper']['what'])) {
    $children = element_children($element['wrapper']['what']);
    foreach ($children as $child) {
      $element['wrapper']['what'][$child]['remove_category_' . $child] = array(
        '#name' => implode('_', $parents) . '_remove_button_' . $child,
        '#delta' => $child,
        '#type' => 'submit',
        '#value' => t('Remove'),
        '#id' => 'remove-button-' . implode('_', $parents) . '_remove_button_' . $child,
        '#submit' => array('culturefeed_content_widget_remove_category_submit'),
        '#attributes' => array(
          'class' => array(
            'culturefeed-content--remove-button',
          ),
        ),
        '#limit_validation_errors' => array($parents),
        '#ajax' => array(
          'callback' => 'culturefeed_content_field_ajax_rebuild_categories',
          'wrapper' => $category_fieldset_id,
        ),
      );
    }
  }

  // Add category button.
  $element['wrapper']['what']['add_category'] = array(
    '#name' => "what-add-category-$parents[2]",
    '#type' => 'submit',
    '#value' => t('Add'),
    '#submit' => array('culturefeed_content_widget_add_category_submit'),
    '#limit_validation_errors' => array($parents),
    '#states' => array(
      'invisible' => array(
        array(
          ':input[name="' . $field_name_base . '[wrapper][what][what_type_0]"]' => array('value' => 'all'),
        ),
      ),
    ),
    '#ajax' => array(
      'callback' => 'culturefeed_content_field_ajax_rebuild_categories',
      'wrapper' => $category_fieldset_id,
    ),
  );

  // "Where" fieldset.
  $element['wrapper']['where'] = array(
    '#title' => t('Where'),
    '#type' => 'fieldset',
    '#attributes' => ['class' => ['fieldset-query-builder']]
  );

  $element['wrapper']['where']['where_type'] = array(
    '#type' => 'select',
    '#options' => [
      'all' => t('All'),
      'region' => t('Region', array('context' => 'Culturefeed content')),
      'city' => t('City or municipality'),
      'postal_code' => t('Postal code + radius'),
    ],
    '#default_value' => $where_type,
  );

  $element['wrapper']['where']['where_equal'] = array(
    '#type' => 'select',
    '#options' => [
      t('is equal to'),
      t('is not equal to')
    ],
    '#default_value' => $where_equal,
    '#states' => array(
      'visible' => array(
        array(
          ':input[name="' . $field_name_base . '[wrapper][where][where_type]"]' => array('value' => 'region'),
        ),
        array(
          ':input[name="' . $field_name_base . '[wrapper][where][where_type]"]' => array('value' => 'city'),
        ),
      ),
    ),
  );

  // Retrieve region options from DB.
  $region_options = ['all' => t('All')];
  $region_terms = culturefeed_search_get_terms_by_hierarchy_depth(0, 'flandersregion', culturefeed_search_get_preferred_language(), 'name');

  foreach ($region_terms as $term) {
    $region_options[$term->tid] = $term->name;
  }

  $element['wrapper']['where']['where_region'] = array(
    '#type' => 'select',
    '#options' => $region_options,
    '#default_value' => $where_region,
    '#states' => array(
      'visible' => array(
        array(
          ':input[name="' . $field_name_base . '[wrapper][where][where_type]"]' => array('value' => 'region'),
        ),
      ),
    ),
  );

  // Retrieve city options from DB.
  $city_options = ['all' => t('All')];
  $city_terms = culturefeed_search_get_terms_by_hierarchy_depth(2, 'flandersregion', culturefeed_search_get_preferred_language(), 'name');

  foreach ($city_terms as $term) {
    $city_options[$term->tid] = $term->name;
  }

  $element['wrapper']['where']['where_city'] = array(
    '#type' => 'select',
    '#options' => $city_options,
    '#default_value' => $where_city,
    '#states' => array(
      'visible' => array(
        array(
          ':input[name="' . $field_name_base . '[wrapper][where][where_type]"]' => array('value' => 'city'),
        ),
      ),
    ),
  );

  $element['wrapper']['where']['where_postal_code'] = array(
    '#type' => 'textfield',
    '#size' => 10,
    '#default_value' => $where_postal_code,
    '#maxlength' => 255,
    '#states' => array(
      'visible' => array(
        array(
          ':input[name="' . $field_name_base . '[wrapper][where][where_type]"]' => array('value' => 'postal_code'),
        ),
      ),
    ),
  );

  $element['wrapper']['where']['where_postal_code_radius'] = array(
    '#type' => 'select',
    '#options' => [
      5 => '+5 km',
      10 => '+10 km',
      15 => '+15 km',
      20 => '+20 km'
    ],
    '#default_value' => $where_postal_code_radius,
    '#states' => array(
      'visible' => array(
        array(
          ':input[name="' . $field_name_base . '[wrapper][where][where_type]"]' => array('value' => 'postal_code'),
        ),
      ),
    ),
  );

  // "When" fieldset.

  $before_after_options = [
    t('before'),
    t('after')
  ];

  $element['wrapper']['when'] = array(
    '#title' => t('When'),
    '#type' => 'fieldset',
    '#description' => t('These filters only apply to events.'),
    '#attributes' => ['class' => ['fieldset-query-builder']],
  );

  $element['wrapper']['when']['when_type_1'] = array(
    '#type' => 'select',
    '#options' => [
      'all' => t('All'),
      'startdate' => t('Start date'),
      'enddate' => t('End date'),
    ],
    '#default_value' => $when_type_1,
  );

  $element['wrapper']['when']['when_before_after_1'] = array(
    '#type' => 'select',
    '#options' => $before_after_options,
    '#default_value' => $when_before_after_1,
    '#states' => array(
      'invisible' => array(
        array(
          ':input[name="' . $field_name_base . '[wrapper][when][when_type_1]"]' => array('value' => 'all'),
        ),
      ),
    ),
  );

  $element['wrapper']['when']['when_date_1'] = array(
    '#type' => 'date_popup',
    '#date_year_range' => '-2:+2',
    '#date_format' => 'd-m-Y',
    '#default_value' => $when_date_1,
    '#date_label_position' => 'none',
    '#states' => array(
      'invisible' => array(
        array(
          ':input[name="' . $field_name_base . '[wrapper][when][when_type_1]"]' => array('value' => 'all'),
        ),
      ),
    ),
  );

  $element['wrapper']['when']['when_type_2'] = array(
    '#type' => 'select',
    '#options' => [
      'all' => t('All'),
      'startdate' => t('Start date'),
      'enddate' => t('End date'),
    ],
    '#default_value' => $when_type_2,
    '#states' => array(
      'invisible' => array(
        array(
          ':input[name="' . $field_name_base . '[wrapper][when][when_type_1]"]' => array('value' => 'all'),
        ),
      ),
    ),
  );

  $element['wrapper']['when']['when_before_after_2'] = array(
    '#type' => 'select',
    '#options' => $before_after_options,
    '#default_value' => $when_before_after_2,
    '#states' => array(
      'invisible' => array(
        array(
          ':input[name="' . $field_name_base . '[wrapper][when][when_type_2]"]' => array('value' => 'all'),
        ),
      ),
    ),
  );

  $element['wrapper']['when']['when_date_2'] = array(
    '#type' => 'date_popup',
    '#date_year_range' => '-2:+2',
    '#date_format' => 'd-m-Y',
    '#default_value' => $when_date_2,
    '#date_label_position' => 'none',
    '#states' => array(
      'invisible' => array(
        array(
          ':input[name="' . $field_name_base . '[wrapper][when][when_type_2]"]' => array('value' => 'all'),
        ),
      ),
    ),
  );

  $element['wrapper']['composite_query'] = array(
    '#type' => 'textarea',
    '#title' => t('Composite query'),
    '#disabled' => TRUE,
    '#resizable' => FALSE,
    '#prefix' => '<div id="' . $composite_query_field_id . '">',
    '#suffix' => '</div>',
  );

  // Build the query form the form_state values.
  $wrapper_parents = array_merge($parents, ['wrapper']);
  $nested_values = drupal_array_get_nested_value($form_state['values'], $wrapper_parents);

  $element['wrapper']['composite_query']['#default_value'] = _culturefeed_content_build_advanced_query($nested_values);

  // Add category button.
  $element['wrapper']['update'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
    '#name' => 'rebuild_query',
    '#submit' => array('culturefeed_content_widget_rebuild_composite_query_submit'),
    '#limit_validation_errors' => array($parents),
    '#attributes' => array(
      'class' => array(
        'culturefeed-content--update-query',
      ),
    ),
    '#ajax' => array(
      'callback' => 'culturefeed_content_field_ajax_rebuild_composite_query',
      'wrapper' => $composite_query_field_id,
      'progress' => array('type' => 'throbber', 'message' => '')
    ),
  );

  $element['wrapper']['query_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Query title'),
    '#default_value' => $query_title,
    '#maxlength' => 255,
    '#description' => t('This will appear on the search results page as active filter'),
  );

  $element['wrapper']['show_postal_code_search_box'] = array(
    '#type' => 'checkbox',
    '#default_value' => $show_postal_code_search_box,
    '#title' => t('Show search box to filter by postal code'),
  );

  // Add custom css.
  drupal_add_css(drupal_get_path('module', 'culturefeed_content') . '/css/culturefeed-content.css');

  $element += array(
    '#element_validate' => array('culturefeed_content_field_widget_form_validate'),
  );

  return $element;
}

function culturefeed_content_widget_rebuild_composite_query_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
}

/**
 * Add a category field row.
 *
 * @param $form
 * @param $form_state
 */
function culturefeed_content_widget_add_category_submit($form, &$form_state) {
  // Add an extra row to the "what category" in the form_state.
  $button = $form_state['triggering_element'];
  $parents = $button['#parents'];

  // The "what" field is up 1 level.
  $sliced = array_slice($parents, 0, -1);
  $what_values = drupal_array_get_nested_value($form_state['values'], $sliced);

  foreach ($what_values as $key => $value) {
    if (!is_array($value)) {
      unset($what_values[$key]);
    }
  }

  // Add the row.
  $what_values[] = [];
  drupal_array_set_nested_value($form_state['values'], $sliced, array_values($what_values));

  $form_state['rebuild'] = TRUE;
}

/**
 * Remove a category field row.
 *
 * @param $form
 * @param $form_state
 */
function culturefeed_content_widget_remove_category_submit($form, &$form_state) {
  $button = $form_state['triggering_element'];
  $delta = $button['#delta'];

  // Remove a row from the "what category" in the form_state.
  $parents = $button['#parents'];
  unset($form_state['what_categories'][$delta]);

  // The "what" field is up 2 levels.
  $sliced = array_slice($parents, 0, -2);
  $what_values = drupal_array_get_nested_value($form_state['values'], $sliced);
  $what_input = drupal_array_get_nested_value($form_state['input'], $sliced);

  foreach ($what_values as $key => $value) {
    if (!is_array($value)) {
      unset($what_values[$key]);
    }
  }

  unset($what_input[$delta]);
  unset($what_values[$delta]);

  drupal_array_set_nested_value($form_state['input'], $sliced, array_values($what_input));
  drupal_array_set_nested_value($form_state['values'], $sliced, array_values($what_values));

  $form_state['rebuild'] = TRUE;
}

/**
 * Rebuild the categories field.
 */
function culturefeed_content_field_ajax_rebuild_categories($form, &$form_state) {
  // Retrieve correct nested field.
  $parents = $form_state['triggering_element']['#parents'];

  if (array_search('wrapper', $parents)) {
    $wrapper_key = array_search('wrapper', $parents);

    $parents = array_splice($parents, 0, $wrapper_key + 2);

    $field = drupal_array_get_nested_value($form, array_merge($parents, ['what']));

    if ($field) {
      return $field;
    }
  }
}

/**
 * Rebuild the composite_query field.
 */
function culturefeed_content_field_ajax_rebuild_composite_query($form, &$form_state) {
  // Retrieve correct nested field.
  $parents = $form_state['triggering_element']['#parents'];

  if (array_search('wrapper', $parents)) {
    $wrapper_key = array_search('wrapper', $parents);

    $parents = array_splice($parents, 0, $wrapper_key + 2);

    $field = drupal_array_get_nested_value($form, array_merge($parents, ['composite_query']));

    if ($field) {
      return $field;
    }
  }
}

/**
 * Form constructor for the contextual search box form.
 *
 * @param $field_item
 *   The field item.
 */
function culturefeed_content_contextual_search_box_form($form, &$form_state, $field_item) {
  $wrapper_id = drupal_html_id('culturefeed-content-list');
  $form['#prefix'] = '<div id="' . $wrapper_id . '">';
  $form['#suffix'] = '</div>';

  $query = [];
  $query['advanced_query']['title'] = $field_item['query_title'];
  $query['advanced_query']['query'] = $field_item['composite_query'];
  $query['sort'] = isset($field_item['sort']) ? $field_item['sort'] : CULTUREFEED_CONTENT_DEFAULT_SORT;

  $filter_enabled = !empty($form_state['values']['filter_postal_code']);
  $last_postal_code = !empty($form_state['last_postal']) ? $form_state['last_postal'] : NULL;

  $postal_code = !empty($form_state['values']['postal_code']) ? (int)$form_state['values']['postal_code'] : NULL;
  $entered_postal_code = $postal_code;
  if (empty($entered_postal_code)) {
    $user_location = culturefeed_search_ui_get_user_location_cookie();
    if (isset($user_location->postal)) {
      $entered_postal_code = $user_location->postal;
    }
  }

  if ($filter_enabled && $postal_code) {
    $query['location'] = $postal_code;
  }
  else {
    $postal_code = NULL;
  }

  if ($postal_code !== $last_postal_code || !isset($form_state['result'])) {
    try {
      $result = _culturefeed_content_get_results($field_item, $postal_code);
      $form_state['result'] = $result;
      $form_state['last_postal'] = $postal_code;
    }
    catch (Exception $e) {
      watchdog_exception('culturefeed_content', $e);
      return $form;
    }
  }
  else {
    $result = $form_state['result'];
  }

  $form['result'] = array(
    '#theme' => 'culturefeed_content_result_list',
    '#title' => $field_item['title'],
    '#search_result' => $result,
    '#query' => $query,
  );

  $form['#attached']['js'] = [
    drupal_get_path('module', 'culturefeed_content') . '/js/contextual_search_box.js',
  ];

  if ($field_item['show_postal_code_search_box']) {

    $form['filter_postal_code'] = array(
      '#type' => 'checkbox',
      '#description' => t('Only show tips in my neighbourhood: <em>@postal_code</em>. <a href="" class="toggle_postal_code" data-id="@id">modify postal code</a>', array(
        '@id' => 'postal_code_container_' . $wrapper_id,
        '@postal_code' => empty($entered_postal_code) ? 1000 : $entered_postal_code,
      )),
      '#suffix' => "</div>",
      '#ajax' => array(
        'callback' => 'culturefeed_content_search_box_ajax_submit',
        'wrapper' => $wrapper_id,
      ),
    );
  }

  $form['postal_code_container'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'id' => 'postal_code_container_' . $wrapper_id,
      'style' => 'display: none;'
    ),
  );

  $form['postal_code_container']['postal_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Postal code'),
    '#size' => 10,
    '#attributes' => array(
      'class' => ['postal-code-container-postal-code'],
    ),
    '#default_value' => empty($entered_postal_code) ? 1000 : $entered_postal_code,
    '#ajax' => array(
      'callback' => 'culturefeed_content_search_box_ajax_submit',
      'wrapper' => $wrapper_id,
      'keypress' => TRUE,
    ),
  );

  return $form;
}

/**
 * Rebuild the content list.
 */
function culturefeed_content_search_box_ajax_submit($form, &$form_state) {
  return $form;
}

/**
 * Implements hook_field_widget_info().
 */
function culturefeed_content_field_widget_info() {
  return array(
    'culturefeed_content_default' => array(
      'label' => t('Default CultureFeed content widget'),
      'field types' => array('culturefeed_content'),
      'settings' => array(),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function culturefeed_content_theme() {
  $path = drupal_get_path('module', 'culturefeed_content') . '/theme';

  return array(
    'culturefeed_content_result_list' => array(
      'variables' => array(
        'title' => NULL,
        'search_result' => NULL,
        'query' => '',
        'show_postal_code_search_box' => 0,
        'instance_id' => '',
        'link_text' => t('See more tips'),
      ),
      'path' => $path,
      'file' => 'theme.inc',
      'template' => 'culturefeed-content-result-list',
    ),
    'culturefeed_content_empty_text' => array(
      'variables' => array(
        'empty_text' => t('No results found.'),
        'classes' => array('alert', 'alert-info'),
      ),
      'path' => $path,
      'file' => 'theme.inc',
    ),
  );
}

/**
 * FAPI validation of an individual culturefeed_content element.
 */
function culturefeed_content_field_widget_form_validate($element, &$form_state, $complete_form) {
  $field_parents = $element['#field_parents'];
  $field_name = $element['#field_name'];
  $language = $element['#language'];

  $field_state = field_form_get_state($field_parents, $field_name, $language, $form_state);

  if (isset($field_state['field'])) {
    // Only massage the form_state values if the field item is being saved.
    if ($form_state['submitted'] && !form_get_errors() && $form_state['triggering_element']['#name'] === 'op') {
      $item = drupal_array_get_nested_value($form_state['values'], $element['#parents']);

      // Massage the field values in the form_state.
      $values = !empty($item['wrapper']) ? $item['wrapper'] : array();

      if (!empty($values['what'])) {
        unset($values['what']['add_category']);

        foreach ($values['what'] as $what_key => $what_item) {
          unset($values['what'][$what_key]['remove_category_' . $what_key]);
        }
      }

      $new_values = array(
        'title' => $values['title'],
        'query_string' => $values['query_string'],
        'filter_query' => $values['filter_query'],
        'rows' => !empty($values['rows']) ? $values['rows'] : CULTUREFEED_CONTENT_DEFAULT_ROWS,
        'sort' => $values['sort'],
        'types' => $values['types'],
        'what_categories' => serialize($values['what']),
        'where_type' => $values['where']['where_type'],
        'where_equal' => (int)$values['where']['where_equal'],
        'where_region' => $values['where']['where_region'],
        'where_city' => $values['where']['where_city'],
        'where_postal_code' => (int)$values['where']['where_postal_code'],
        'where_postal_code_radius' => $values['where']['where_postal_code_radius'],
        'when_type_1' => $values['when']['when_type_1'],
        'when_before_after_1' => (int)$values['when']['when_before_after_1'],
        'when_date_1' => $values['when']['when_date_1'],
        'when_type_2' => $values['when']['when_type_2'],
        'when_before_after_2' => (int)$values['when']['when_before_after_2'],
        'when_date_2' => $values['when']['when_date_2'],
        'composite_query' => $values['composite_query'],
        'query_title' => $values['query_title'],
        'show_postal_code_search_box' => $values['show_postal_code_search_box'],
      );

      // Save types as CSV.
      $types_csv = '';
      foreach ($values['types'] as $type => $value) {
        $types_csv = $value ? $types_csv . "$type," : $types_csv;
      }
      $new_values['types'] = rtrim($types_csv, ',');

      // Set the massaged values in the form state.
      form_set_value($element, $new_values, $form_state);
    }
  }
}
