<?php

/**
 * @file
 * Contains culturefeed_content.module.
 */

define('CULTUREFEED_CONTENT_DEFAULT_ROWS', 10);
define('CULTUREFEED_CONTENT_DEFAULT_SORT', 'date');
define('CULTUREFEED_CONTENT_DEFAULT_TITLE', t('Our selection'));

/**
 * Implements hook_field_create_instance().
 */
function culturefeed_content_field_create_instance($instance) {

  if ($instance['widget']['type'] == 'culturefeed_content_default') {
    // Set some default values.
    $instance['default_value'] = array(
      array(
        'rows' => CULTUREFEED_CONTENT_DEFAULT_ROWS,
        'sort' => CULTUREFEED_CONTENT_DEFAULT_SORT,
        'title' => CULTUREFEED_CONTENT_DEFAULT_TITLE,
      ),
    );
    field_update_instance($instance);
  }
}

/**
 * Validation handler for the CultureFeed content field.
 */
function culturefeed_content_field_culturefeed_content_validate($element, &$form_state, $form) {

  $parents = $element['#parents'];
  $parents[] = 'wrapper';
  $values = drupal_array_get_nested_value($form_state['values'], $parents);
  $items = array(
    'title' => $values['title'],
    'query_string' => $values['query_string'],
    'filter_query' => $values['filter_query'],
    'rows' => ($values['rows'] || $values['rows'] == 0) ? $values['rows'] : CULTUREFEED_CONTENT_DEFAULT_ROWS,
    'sort' => $values['sort'],
    'where_type' => $values['where']['where_type'],
    'where_equal' => (int)$values['where']['where_equal'],
    'where_region' => $values['where']['where_region'],
    'where_city' => $values['where']['where_city'],
    'where_postal_code' => (int)$values['where']['where_postal_code'],
    'where_postal_code_radius' => $values['where']['where_postal_code_radius'],
    'when_type_1' => $values['when']['when_type_1'],
    'when_before_after_1' => (int)$values['when']['when_before_after_1'],
    'when_date_1' => $values['when']['when_date_1'],
    'when_type_2' => $values['when']['when_type_2'],
    'when_before_after_2' => (int)$values['when']['when_before_after_2'],
    'when_date_2' => $values['when']['when_date_2'],
    'composite_query' => $values['composite_query'],
    'query_title' => $values['query_title'],
    'show_postal_code_search_box' => $values['show_postal_code_search_box'],
  );

  // TODO: what_categories

  // Save types as CSV.
  $types_csv = '';
  foreach ($values['types'] as $type => $value) {
    $types_csv = $value ? $types_csv . "$type," : $types_csv;
  }
  $items['types'] = rtrim($types_csv, ',');

  form_set_value($element, $items, $form_state);

}

/**
 * Implements hook_field_formatter_info().
 */
function culturefeed_content_field_formatter_info() {

  return array(
    'culturefeed_content_default' => array(
      'label' => t('Default CultureFeed content formatter'),
      'field types' => array('culturefeed_content'),
    ),
  );

}

/**
 * Implements hook_field_formatter_view().
 */
function culturefeed_content_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $element = array();
  switch ($display['type']) {

    case 'culturefeed_content_default':

      foreach ($items as $delta => $item) {

        $title = $item['title'];
        $query_string = $item['query_string'];
        $filter_query = $item['filter_query'];
        $sort = isset($item['sort']) ? $item['sort'] : CULTUREFEED_CONTENT_DEFAULT_SORT;
        $rows = isset($item['rows']) ? $item['rows'] : CULTUREFEED_CONTENT_DEFAULT_ROWS;

        if (empty($query_string)) {
          $query_string = '*:*';
        }

        $parameters = array();
        if ($query_string) {
          $query_string = _culturefeed_search_ui_sanitize_query_term($query_string);
          $parameters[] = new \CultuurNet\Search\Parameter\Query($query_string);
        }
        if ($filter_query) {
          $parameters[] = new \CultuurNet\Search\Parameter\FilterQuery($filter_query);
        }

        $search_type = culturefeed_get_searchable_type('activiteiten');
        $sort_options = culturefeed_search_ui_get_sort_options_for_page($search_type);
        foreach ($sort_options as $option) {
          if (isset($option['value'])) {
            if ($option['value'] == $sort) {
              $parameters[] = new \CultuurNet\Search\Parameter\Parameter('sort', $option['query']);
              break;
            }
          }
        }

        $parameters[] = new \CultuurNet\Search\Parameter\Rows($rows);
        $parameters[] = new \CultuurNet\Search\Parameter\FilterQuery('type:event OR type:production');
        $parameters[] = new \CultuurNet\Search\Parameter\Group();

        // Execute search.
        try {
          $result = culturefeed_get_search_service()->search($parameters);
        }
        catch (Exception $e) {
          watchdog_exception('culturefeed_content', $e);
          return FALSE;
        }

        $search_results = $result->getItems();

        // Render the results.
        $build = array();

        if ($result->getTotalCount() > 0) {
          $build[] = array(
            '#theme' => 'culturefeed_content_title',
            '#title' => $title
          );

          foreach ($search_results as $search_result) {
            $build[] = array(
              '#theme' => 'culturefeed_' . $search_result->getType() . '_summary',
              '#item' => $search_result,
            );
          }

          if ($result->getTotalCount() > $rows) {

            if (function_exists('culturefeed_search_get_search_url_query')) {

              $query = 'q=' . html_entity_decode($query_string) . ($filter_query ? '&fq=' . html_entity_decode($filter_query) : '');
              $query .= '&sort=' . $sort;

              $build[] = array(
                '#theme' => 'culturefeed_content_all_results_link',
                '#query' => culturefeed_search_get_search_url_query($query),
              );

            }

          }

        }

        else {

          $build[] = array(
            '#theme' => 'culturefeed_content_empty_text',
          );

        }

        $element[$delta] = $build;

      }
      break;

  }
  return $element;

}

/**
 * Implements hook_field_info().
 */
function culturefeed_content_field_info() {

  return array(
    'culturefeed_content' => array(
      'label' => t('CultureFeed content'),
      'description' => t('Renders a CultureFeed search.'),
      'settings' => array(),
      'default_widget' => 'culturefeed_content_default',
      'default_formatter' => 'culturefeed_content_default',
    ),
  );

}

/**
 * Implements hook_field_is_empty().
 */
function culturefeed_content_field_is_empty($item, $field) {

  if (empty($item)) {
    return TRUE;
  }
  return FALSE;

}

/**
 * Implements hook_field_widget_form().
 */
function culturefeed_content_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $title = isset($items[$delta]['title']) ? $items[$delta]['title'] : '';
  $query_string = isset($items[$delta]['query_string']) ? $items[$delta]['query_string'] : '';
  $filter_query = isset($items[$delta]['filter_query']) ? $items[$delta]['filter_query'] : '';
  $rows = isset($items[$delta]['rows']) ? $items[$delta]['rows'] : '';
  $sort = isset($items[$delta]['sort']) ? $items[$delta]['sort'] : '';
  $where_type = isset($items[$delta]['where_type']) ? $items[$delta]['where_type'] : 'all';
  $where_equal = isset($items[$delta]['where_equal']) ? $items[$delta]['where_equal'] : 0;
  $where_region = isset($items[$delta]['where_region']) ? $items[$delta]['where_region'] : '';
  $where_city = isset($items[$delta]['where_city']) ? $items[$delta]['where_city'] : '';
  $where_postal_code = isset($items[$delta]['where_postal_code']) ? $items[$delta]['where_postal_code'] : '';
  $where_postal_code_radius = isset($items[$delta]['where_postal_code_radius']) ? $items[$delta]['where_postal_code_radius'] : 5;
  $when_type_1 = isset($items[$delta]['when_type_1']) ? $items[$delta]['when_type_1'] : 'all';
  $when_before_after_1 = isset($items[$delta]['when_before_after_1']) ? $items[$delta]['when_before_after_1'] : 0;
  $when_date_1 = isset($items[$delta]['when_date_1']) ? $items[$delta]['when_date_1'] : '';
  $when_type_2 = isset($items[$delta]['when_type_2']) ? $items[$delta]['when_type_2'] : 'all';
  $when_before_after_2 = isset($items[$delta]['when_before_after_2']) ? $items[$delta]['when_before_after_2'] : 0;
  $when_date_2 = isset($items[$delta]['when_date_2']) ? $items[$delta]['when_date_2'] : '';
  $query_title = isset($items[$delta]['query_title']) ? $items[$delta]['query_title'] : '';
  $show_postal_code_search_box = isset($items[$delta]['show_postal_code_search_box']) ? $items[$delta]['show_postal_code_search_box'] : '';

  // Return types CSV to array.
  $types = isset($items[$delta]['types']) ? explode(',', $items[$delta]['types']) : [];

  // TODO
  // $what_category_rows = isset($items[$delta]['what_categories']) ? $items[$delta]['what_categories'] : [];

  $element['wrapper'] = array(
    '#title' => t('CultureFeed content'),
    '#type' => 'fieldset',
  );

  $element['wrapper']['title'] = array(
    '#default_value' => $title,
    '#required' => $element['#required'],
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#maxlength' => 255,
  );

  $element['wrapper']['query_string'] = array(
    '#default_value' => $query_string,
    '#required' => $element['#required'],
    '#title' => t('Keywords'),
    '#description' => t('Use * as a wildcard to search on parts of a word, e.g. <strong>*speeltuin, sinterklaas*</strong>.<br> Combine multiple terms with AND, OR and through using brackets, e.g. <strong>(workshop OR cursus) AND keramiek*</strong>.<br> Exact combinations need to use double qoutes, e.g. <strong>"dag van de wetenschap"</strong>.'),
    '#type' => 'textfield',
    '#maxlength' => 1000,
    '#ajax' => array(
      'callback' => '_culturefeed_ajax_rebuild_composite_query',
      'wrapper' => 'advanced_query_field',
      'progress' => array('type' => 'none')
    ),
  );

  $element['wrapper']['filter_query'] = array(
    '#default_value' => $filter_query,
    '#required' => $element['#required'],
    '#title' => t('Custom filters'),
    '#description' => t('Add extra parameters or your own advanced filter query, e.g. price:0 or hasimage:true'),
    '#type' => 'textfield',
    '#maxlength' => 1000,
    '#ajax' => array(
      'callback' => '_culturefeed_ajax_rebuild_composite_query',
      'wrapper' => 'advanced_query_field',
      'progress' => array('type' => 'none')
    ),
  );

  $element['wrapper']['rows'] = array(
    '#default_value' => $rows,
    '#required' => $element['#required'],
    '#title' => t('Rows'),
    '#description' => t('Number of results to show, defaults to "10"'),
    '#type' => 'textfield',
  );

  // Sort.
  $search_type = culturefeed_get_searchable_type('activiteiten');
  $sort_options = culturefeed_search_ui_get_sort_options_for_page($search_type);
  $options = array();

  foreach ($sort_options as $key => $option) {

    if ($key === 'default') {
      continue;
    }
    $options[$option['value']] = $option['label'];

  }

  $element['wrapper']['sort'] = array(
    '#default_value' => $sort,
    '#options' => $options,
    '#required' => $element['#required'],
    '#title' => t('Sort'),
    '#type' => 'radios',
  );

  $element['wrapper']['types'] = array(
    '#type' => 'checkboxes',
    '#options' => [
      'event' => t('Event'),
      'actor' => t('Actor'),
      'production' => t('Production')
    ],
    '#default_value' => $types,
    '#title' => t('Type'),
    '#required' => $element['#required'],
    '#ajax' => array(
      'callback' => '_culturefeed_ajax_rebuild_composite_query',
      'wrapper' => 'advanced_query_field',
      'progress' => array('type' => 'none')
    ),
  );

  // "Categories" fieldset (What)

  $element['wrapper']['what'] = array(
    '#title' => t('Categories'),
    '#type' => 'fieldset',
    '#attributes' => ['class' => 'fieldset-query-builder']
  );


  $element['wrapper']['what']['what_categories'] = array(
    '#type' => 'hidden',
  );

  // Possibly add multiple rows to the existing element.
  // TODO
  $what_category_rows = [];

  if (empty($what_category_rows)) {
    $element = _culturefeed_add_builder_category_row($element, 0);
  }
  else {
    foreach($what_category_rows as $i => $values) {
      $element = _culturefeed_add_builder_category_row($element, $i, $values);
    }
  }

  // "Where" fieldset.

  $element['wrapper']['where'] = array(
    '#title' => t('Where'),
    '#type' => 'fieldset',
    '#attributes' => ['class' => 'fieldset-query-builder']
  );

  $element['wrapper']['where']['where_type'] = array(
    '#type' => 'select',
    '#options' => [
      'all' => t('Alle'),
      'region' => t('Region'),
      'city' => t('City or municipality'),
      'postal_code' => t('Postal code + radius'),
    ],
    '#default_value' => $where_type,
    '#ajax' => array(
      'callback' => '_culturefeed_ajax_rebuild_composite_query',
      'wrapper' => 'advanced_query_field',
      'progress' => array('type' => 'none')
    ),
  );

  $element['wrapper']['where']['where_equal'] = array(
    '#type' => 'select',
    '#options' => [
      t('is equal to'),
      t('is not equal to')
    ],
    '#default_value' => $where_equal,
    '#states' => array(
      'visible' => array(
        array(
          ':input[name="field_zoekopdracht[und][0][wrapper][where][where_type]"]' => array('value' => 'region'),
        ),
        array(
          ':input[name="field_zoekopdracht[und][0][wrapper][where][where_type]"]' => array('value' => 'city'),
        ),
      ),
    ),
    '#ajax' => array(
      'callback' => '_culturefeed_ajax_rebuild_composite_query',
      'wrapper' => 'advanced_query_field',
      'progress' => array('type' => 'none')
    ),
  );

  // Retrieve region options from DB.
  $region_options = ['all' => t('Alle')];
  $region_terms = culturefeed_search_get_terms_by_hierarchy_depth(2, 'flandersregion', culturefeed_search_get_preferred_language(), 'name');

  foreach ($region_terms as $term) {
    $region_options[$term->tid] = $term->name;
  }

  $element['wrapper']['where']['where_region'] = array(
    '#type' => 'select',
    '#options' => $region_options,
    '#default_value' => $where_region,
    '#states' => array(
      'visible' => array(
        array(
          ':input[name="field_zoekopdracht[und][0][wrapper][where][where_type]"]' => array('value' => 'region'),
        ),
      ),
    ),
    '#ajax' => array(
      'callback' => '_culturefeed_ajax_rebuild_composite_query',
      'wrapper' => 'advanced_query_field',
      'progress' => array('type' => 'none')
    ),
  );

  // Retrieve city options from DB.
  $city_options = ['all' => t('Alle')];
  $city_terms = culturefeed_search_get_terms_by_hierarchy_depth(2, 'flandersregion', culturefeed_search_get_preferred_language(), 'name');

  foreach ($city_terms as $term) {
    $city_options[$term->tid] = $term->name;
  }

  $element['wrapper']['where']['where_city'] = array(
    '#type' => 'select',
    '#options' => $city_options,
    '#default_value' => $where_city,
    '#states' => array(
      'visible' => array(
        array(
          ':input[name="field_zoekopdracht[und][0][wrapper][where][where_type]"]' => array('value' => 'city'),
        ),
      ),
    ),
    '#ajax' => array(
      'callback' => '_culturefeed_ajax_rebuild_composite_query',
      'wrapper' => 'advanced_query_field',
      'progress' => array('type' => 'none')
    ),
  );

  $element['wrapper']['where']['where_postal_code'] = array(
    '#type' => 'textfield',
    '#size' => 10,
    '#default_value' => $where_postal_code,
    '#maxlength' => 255,
    '#states' => array(
      'visible' => array(
        array(
          ':input[name="field_zoekopdracht[und][0][wrapper][where][where_type]"]' => array('value' => 'postal_code'),
        ),
      ),
    ),
    '#ajax' => array(
      'callback' => '_culturefeed_ajax_rebuild_composite_query',
      'wrapper' => 'advanced_query_field',
      'progress' => array('type' => 'none')
    ),
  );

  $element['wrapper']['where']['where_postal_code_radius'] = array(
    '#type' => 'select',
    '#options' => [
      5 => '+5 km',
      10 => '+10 km',
      15 => '+15 km',
      20 => '+20 km'
    ],
    '#default_value' => $where_postal_code_radius,
    '#states' => array(
      'visible' => array(
        array(
          ':input[name="field_zoekopdracht[und][0][wrapper][where][where_type]"]' => array('value' => 'postal_code'),
        ),
      ),
    ),
    '#ajax' => array(
      'callback' => '_culturefeed_ajax_rebuild_composite_query',
      'wrapper' => 'advanced_query_field',
      'progress' => array('type' => 'none')
    ),
  );

  // "When" fieldset.

  $before_after_options = [
    t('before'),
    t('after')
  ];

  $element['wrapper']['when'] = array(
    '#title' => t('When'),
    '#type' => 'fieldset',
    '#attributes' => ['class' => 'fieldset-query-builder']
  );

  $element['wrapper']['when']['when_type_1'] = array(
    '#type' => 'select',
    '#options' => [
      'all' => t('Alle'),
      'start_date' => t('Start date'),
      'end_date' => t('End date'),
    ],
    '#default_value' => $when_type_1,
    '#ajax' => array(
      'callback' => '_culturefeed_ajax_rebuild_composite_query',
      'wrapper' => 'advanced_query_field',
      'progress' => array('type' => 'none')
    ),
  );

  $element['wrapper']['when']['when_before_after_1'] = array(
    '#type' => 'select',
    '#options' => $before_after_options,
    '#default_value' => $when_before_after_1,
    '#states' => array(
      'invisible' => array(
        array(
          ':input[name="field_zoekopdracht[und][0][wrapper][when][when_type_1]"]' => array('value' => 'all'),
        ),
      ),
    ),
    '#ajax' => array(
      'callback' => '_culturefeed_ajax_rebuild_composite_query',
      'wrapper' => 'advanced_query_field',
      'progress' => array('type' => 'none')
    ),
  );

  $element['wrapper']['when']['when_date_1'] = array(
    '#type' => 'date_popup',
    '#date_year_range' => '-2:+2',
    '#date_format' => 'd-m-Y',
    '#default_value' => $when_date_1,
    '#date_label_position' => 'none',
    '#states' => array(
      'invisible' => array(
        array(
          ':input[name="field_zoekopdracht[und][0][wrapper][when][when_type_1]"]' => array('value' => 'all'),
        ),
      ),
    ),
    '#ajax' => array(
      'callback' => '_culturefeed_ajax_rebuild_composite_query',
      'wrapper' => 'advanced_query_field',
      'progress' => array('type' => 'none')
    ),
  );

  $element['wrapper']['when']['when_type_2'] = array(
    '#type' => 'select',
    '#options' => [
      'all' => t('Alle'),
      'start_date' => t('Start date'),
      'end_date' => t('End date'),
    ],
    '#default_value' => $when_type_2,
    '#ajax' => array(
      'callback' => '_culturefeed_ajax_rebuild_composite_query',
      'wrapper' => 'advanced_query_field',
      'progress' => array('type' => 'none')
    ),
  );

  $element['wrapper']['when']['when_before_after_2'] = array(
    '#type' => 'select',
    '#options' => $before_after_options,
    '#default_value' => $when_before_after_2,
    '#states' => array(
      'invisible' => array(
        array(
          ':input[name="field_zoekopdracht[und][0][wrapper][when][when_type_2]"]' => array('value' => 'all'),
        ),
      ),
    ),
    '#ajax' => array(
      'callback' => '_culturefeed_ajax_rebuild_composite_query',
      'wrapper' => 'advanced_query_field',
      'progress' => array('type' => 'none')
    ),
  );

  $element['wrapper']['when']['when_date_2'] = array(
    '#type' => 'date_popup',
    '#date_year_range' => '-2:+2',
    '#date_format' => 'd-m-Y',
    '#default_value' => $when_date_2,
    '#date_label_position' => 'none',
    '#states' => array(
      'invisible' => array(
        array(
          ':input[name="field_zoekopdracht[und][0][wrapper][when][when_type_2]"]' => array('value' => 'all'),
        ),
      ),
    ),
    '#ajax' => array(
      'callback' => '_culturefeed_ajax_rebuild_composite_query',
      'wrapper' => 'advanced_query_field',
      'progress' => array('type' => 'none')
    ),
  );

  $element['wrapper']['composite_query'] = array(
    '#type' => 'textarea',
    '#title' => t('Composite query'),
    '#disabled' => TRUE,
    '#prefix' => '<div id="advanced_query_field">',
    '#suffix' => '</div>',
  );
  $element['wrapper']['composite_query']['#default_value'] = _culturefeed_build_advanced_query($form_state['values']['field_zoekopdracht'][LANGUAGE_NONE][0]);

  $element['wrapper']['query_title'] = array(
    '#type' => 'textfield',
    '#default' => $query_title,
    '#title' => t('Query title'),
    '#required' => $element['#required'],
    '#maxlength' => 255,
    '#ajax' => array(
      'callback' => '_culturefeed_ajax_rebuild_composite_query',
      'wrapper' => 'advanced_query_field',
      'progress' => array('type' => 'none')
    ),
  );

  $element['wrapper']['show_postal_code_search_box'] = array(
    '#type' => 'checkbox',
    '#default_value' => $show_postal_code_search_box,
    '#title' => t('Show search box to filter by postal code'),
  );

  $element['#element_validate'] = array('culturefeed_content_field_culturefeed_content_validate');

  return $element;
}

/**
 * Add a category row to the query builder categories field.
 *
 * @param $id
 * @param array $values
 *
 * @return string
 */
function _culturefeed_add_builder_category_row($element, $id, $values = []) {
  // TODO: check values for defaults.

  // Build category type options.
  $selectable_categories = ['eventtype', 'theme', 'actortype', 'facility'];
  $domains = culturefeed_search_get_domains();
  $category_type_options = ['all' => t('Alle')];

  foreach ($selectable_categories as $category) {
    $category_type_options[$category] = $domains[$category];
  }

  $element['wrapper']['what']["what_type_$id"] = array(
    '#type' => 'select',
    '#options' => $category_type_options,
    '#default_value' => 'all',
    '#ajax' => array(
      'callback' => '_culturefeed_ajax_rebuild_composite_query',
      'wrapper' => 'advanced_query_field',
      'progress' => array('type' => 'none')
    ),
  );

  $element['wrapper']['what']["what_equal_$id"] = array(
    '#type' => 'select',
    '#options' => [
      t('is equal to'),
      t('is not equal to')
    ],
    '#default_value' => 0,
    '#states' => array(
      'invisible' => array(
        array(
          ":input[name=\"field_zoekopdracht[und][0][wrapper][what][what_type_$id]\"]" => array('value' => 'all'),
        ),
      ),
    ),
    '#ajax' => array(
      'callback' => '_culturefeed_ajax_rebuild_composite_query',
      'wrapper' => 'advanced_query_field',
      'progress' => array('type' => 'none')
    ),
  );

  // Build select fields for each category.
  foreach ($selectable_categories as $category) {
    $category_options = culturefeed_search_get_categories_by_domain($category);

    $element['wrapper']['what']["what_$category" . "_$id"] = array(
      '#type' => 'select',
      '#options' => $category_options,
      '#states' => array(
        'visible' => array(
          array(
            ":input[name=\"field_zoekopdracht[und][0][wrapper][what][what_type_$id]\"]" => array('value' => $category),
          ),
        ),
      ),
      '#ajax' => array(
        'callback' => '_culturefeed_ajax_rebuild_composite_query',
        'wrapper' => 'advanced_query_field',
        'progress' => array('type' => 'none')
      ),
    );
  }

  return $element;
}

/**
 * Build an advanced query string based on the current builder values.
 */
function _culturefeed_build_advanced_query($values) {
  // TODO: Build advanced query based on current form values.
  return 'todo';
}

/**
 * Rebuild the composite_query field.
 */
function _culturefeed_ajax_rebuild_composite_query($form, &$form_state) {
  return $form['field_zoekopdracht'][LANGUAGE_NONE][0]['wrapper']['composite_query'];
}

/**
 * Implements hook_field_widget_info().
 */
function culturefeed_content_field_widget_info() {

  return array(
    'culturefeed_content_default' => array(
      'label' => t('Default CultureFeed content widget'),
      'field types' => array('culturefeed_content'),
      'settings' => array(),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );

}

/**
 * Implements hook_theme().
 */
function culturefeed_content_theme() {

  return array(
    'culturefeed_content_empty_text' => array(
      'variables' => array(
        'empty_text' => t('No results found.'),
        'classes' => array('alert', 'alert-info'),
      ),
    ),
    'culturefeed_content_all_results_link' => array(
      'variables' => array(
        'link_text' => t('Show all events'),
        'query' => '',
        'classes' => array('cf-content-all-results-link'),
      ),
    ),
    'culturefeed_content_title' => array(
      'variables' => array(
        'title' => '',
        'classes' => array('cf-content-title'),
      ),
    )
  );

}

/**
 * Returns HTML for the all results link.
 *
 * @param array $variables
 *   The variables.
 *
 * @return string
 *   The HTML.
 */
function theme_culturefeed_content_all_results_link(array $variables) {
  if ($variables['show_more_link']) {
    $build[] = array(
      '#markup' => l(
        $variables['link_text'],
        'agenda/search',
        array(
          'html' => TRUE,
          'attributes' => array(
            'class' => $variables['classes'],
          ),
          'query' => $variables['query'],
        )
      ),
    );
  }
  else if (!$variables['show_more_link'] && empty($variables['more_link'])) {
    $build[] = array();
  }
  else {
    $build[] = array(
      '#markup' => l(
        $variables['link_text'],
        $variables['more_link'],
        array(
          'html' => TRUE,
          'attributes' => array(
            'class' => $variables['classes'],
          )
        )
      ),
    );
  }

  return drupal_render($build);

}

/**
 * Returns HTML for the empty text.
 *
 * @param array $variables
 *   The variables.
 *
 * @return string
 *   The HTML.
 */
function theme_culturefeed_content_empty_text(array $variables) {

  $build = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => $variables['classes'],
    ),
    'empty_text' => array(
      '#markup' => $variables['empty_text'],
    ),
  );

  return drupal_render($build);

}

/**
 * Returns HTML for the title.
 *
 * @param array $variables
 *   The variables.
 *
 * @return string
 *   The HTML.
 */
function theme_culturefeed_content_title(array $variables) {

  if (empty($variables['title'])) {
    $variables['title'] = t('Our selection');
  }

  $build = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => $variables['classes'],
    ),
    'title' => array(
      '#markup' => $variables['title'],
    ),
  );


  return drupal_render($build);
}