<?php
/**
 * @file
 * Creates a tool to subscribe to and construct mailings on CultureFeed.
 */

require_once 'culturefeed_mailing.helpers.inc';

/**
 * Implements hook_permission().
 */
function culturefeed_mailing_permission() {
  return array(
    'subscribe to mailings' => array(
      'title' => t('Subscribe to mailings'),
      'description' => t('Allows the user to subscribe to mailings'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function culturefeed_mailing_menu() {

  $items = array();

  $items['culturefeed/toggle/newsletter-optin/%/%/%'] = array(
    'title' => 'Newsletter opt-in',
    'page callback' => 'culturefeed_mailing_toggle_optin',
    'page arguments' => array(3, 4),
    'access callback' => 'culturefeed_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_mailing.pages.inc',
  );

  $items['subscribe'] = array(
    'title' => 'Subscribe to our newsletter',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_mailing_subscribe_form'),
    'access arguments' => array('subscribe to mailings'),
    'file' => 'culturefeed_mailing.pages.inc',
  );

  $items['subscribe/subscribed'] = array(
    'title' => 'Subscribed to our newsletter',
    'page callback' => 'culturefeed_mailing_user_subscribed',
    'access arguments' => array('subscribe to mailings'),
    'file' => 'culturefeed_mailing.pages.inc',
  );

  $items['subscribe/update'] = array(
    'title' => 'Update your info',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_mailing_subscription_update_form'),
    'access arguments' => array('subscribe to mailings'),
    'file' => 'culturefeed_mailing.pages.inc',
  );

  $items['subscribe/updated'] = array(
    'title' => 'Subscription info updated',
    'page callback' => 'culturefeed_mailing_user_updated',
    'access arguments' => array('subscribe to mailings'),
    'file' => 'culturefeed_mailing.pages.inc',
  );

  $items['culturefeed/mailing'] = array(
    'title' => 'Newsletters',
    'page callback' => 'culturefeed_mailing_page_my_newsletters',
    'access callback' => 'culturefeed_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'culturefeed_mailing.pages.inc',
  );

  // Configuration pages.
  $items['admin/config/culturefeed/mailing'] = array(
    'title' => 'CultureFeed Mailing',
    'description' => 'CultureFeed Mailing settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_mailing_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'culturefeed_mailing.admin.inc',
  );

  return $items;

}

/**
 * Implements hook_theme().
 */
function culturefeed_mailing_theme() {

  $path = drupal_get_path('module', 'culturefeed_mailing') . '/theme';

  return array(
    'culturefeed_mailing_optin' => array(
      'variables' => array('mailing_id' => 0),
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_mailing_user_profile_admin' => array(
      'variables' => array('mailings' => array()),
      'template' => 'culturefeed-mailing-user-profile-admin',
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_mailing_user_profile_admin_item' => array(
      'variables' => array('item' => NULL),
      'template' => 'culturefeed-mailing-user-profile-admin-item',
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_mailing_content_block_subscribed' => array(
      'variables' => array('title' => NULL, 'message' => NULL),
      'template' => 'culturefeed-mailing-content-block-subscribed',
      'path' => $path,
    ),
    'culturefeed_mailing_content_block_already_subscribed' => array(
      'variables' => array('title' => NULL, 'message' => NULL),
      'template' => 'culturefeed-mailing-content-block-already-subscribed',
      'path' => $path,
      'file' => 'theme.inc',
    ),
  );
}


/**
 * Implements hook_block_info().
 */
function culturefeed_mailing_block_info() {

  $blocks = array();
  $blocks['newsletter_opt_in'] = array(
    'info' => t('Culturefeed mailings: Newsletter opt-in'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['newsletter_form'] = array(
    'info' => t('Culturefeed mailings: Newsletter form'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;

}


/**
 * Implements hook_block_view().
 */
function culturefeed_mailing_block_view($delta) {

  module_load_include('inc', 'culturefeed_mailing', 'culturefeed_mailing.blocks');

  if (function_exists('culturefeed_mailing_block_' . $delta . '_is_visible')) {
    if (!call_user_func('culturefeed_mailing_block_' . $delta . '_is_visible')) {
      return FALSE;
    }
  }

  if (function_exists('culturefeed_mailing_block_' . $delta . '_view')) {
    return call_user_func('culturefeed_mailing_block_' . $delta . '_view');
  }

}

/**
 * Implements hook_block_configure().
 */
function culturefeed_mailing_block_configure($delta) {

  $form = array();

  if ($delta == 'newsletter_form') {

    $form['uitid_light'] = array(
      '#title' => t('UiTiD Light settings.'),
      '#type' => 'fieldset',
      '#access' => CULTUREFEED_API_LIGHT_ID_ALLOWED,
    );

    $form['uitid_light']['show_zip_code'] = array(
      '#title' => t('Show the zip code field'),
      '#type' => 'checkbox',
      '#default_value' => variable_get('culturefeed_mailing_block_show_zip', 0),
      '#description' => t("Check this checkbox if you want to show the zip code field on the newsletter form.</br>'
        Keep in mind that the field will only be shown if this checkbox is checked '
        AND the admin setting for the UiTiD light permissions has been set on admin/config/culturefeed/api-settings.
      "),
    );

  }

  return $form;

}

/**
 * Implements hook_block_save().
 */
function culturefeed_mailing_block_save($delta, $edit) {

  if ($delta == 'newsletter_form') {
    variable_set('culturefeed_mailing_block_show_zip', $edit['show_zip_code']);
  }

}

/**
 * Implements hook_culturefeed_ui_profile_menu().
 */
function culturefeed_mailing_culturefeed_ui_profile_menu() {

  return array(
    'emails' => array(
      'title' => t('Newsletters'),
      'url' => 'culturefeed/mailing',
      'description' => t('Manage newsletters you can subscribe to'),
      'weight' => -16,
    ),
  );

}

/**
 * Subscribe a given user to a mailing.
 */
function culturefeed_mailing_subscribe_user($account, $mailing_id, $use_auth = TRUE) {
  DrupalCultureFeed::subscribeToMailing($account->id, $mailing_id, $use_auth);
  module_invoke_all('culturefeed_mailing_user_subscribed', $account);
}

/**
 * Subscribe a given user to a mailing using the light id.
 */
function culturefeed_mailing_subscribe_user_light($email, $mailing_id, $zip = '') {
  $account = new CultureFeed_User();
  $account->id = DrupalCultureFeed::getUserLightId($email, $zip);
  culturefeed_mailing_subscribe_user($account, $mailing_id, FALSE);
}

/**
 * Form callback: Show the newsletter form as a block.
 */
function culturefeed_mailing_newsletter_block_form($form, &$form_state) {

  $form = array();
  if (isset($form_state['subscribed']) && $form_state['subscribed'] == TRUE) {

    $form['subscribed'] = array(
      '#theme' => 'culturefeed_mailing_content_block_subscribed',
      '#title' => t('Thanks!'),
      '#message' => t('You have successfully subscribed to our newsletter'),
    );

  }
  else {

    if (!empty($form_state['invalid_email'])) {
      drupal_set_message(t('The provided email address is invalid'), 'error');
    }

    // Get the user account.
    $account = culturefeed_load_logged_in_user();
    $user_already_subscribed = $account ? _culturefeed_mailing_check_user_subscription($account->id, variable_get('culturefeed_mailing_list')) : FALSE;
    if ($user_already_subscribed) {
      $form['already_subscribed'] = array(
        '#theme' => 'culturefeed_mailing_content_block_already_subscribed',
        '#title' => NULL,
        '#message' => NULL,
      );
    }
    else {

      $show_zip = variable_get('culturefeed_mailing_block_show_zip', 0);

      if ($account) {
        $email = $account->mbox;
        $disabled = TRUE;
        $description = '<span>' . t('Change your email address <a href="!url">here</a>.', array('!url' => url('culturefeed/account/edit'))) . '</span>';
        $zipcode = !empty($account->zip) ? $account->zip : '';
      }

      else {
        $email = '';
        $disabled = FALSE;
        $description = '';
        $zipcode = '';
      }

      $form['intro'] = array(
        '#type' => 'item',
        '#title' => '',
        '#markup' => variable_get('culturefeed_mailing_block_description', ''),
      );

      $form['mail'] = array(
        '#type' => 'textfield',
        '#title' => t('Email'),
        '#description' => $description,
        '#size' => 40,
        '#maxlength' => 255,
        '#default_value' => $email,
        '#disabled' => $disabled,
        '#required' => TRUE,
      );

      if ($show_zip && CULTUREFEED_API_LIGHT_ID_ALLOWED) {

        $form['zip'] = array(
          '#type' => 'textfield',
          '#title' => t('Zipcode'),
          '#required' => FALSE,
          // '#description' => t('Zipcode'),
          '#size' => 40,
          '#default_value' => $zipcode,
          '#attributes' => array(
            'class' => array('zip-field'),
          ),
        );

        // Set zipcode with cookie
        // Attach jquery.cookie library.
        if (empty($zipcode)) {
          $form['#attached']['library'][] = array('system', 'jquery.cookie');

          // Attach scripts.
          $form['#attached']['js'][] = array(
            'data' => drupal_get_path('module', 'culturefeed_mailing') . '/js/culturefeed_mailing.js',
            'type' => 'file',
            'weight' => 0,
          );
        }
      }

      $id = drupal_html_id('newsletter-form-wrapper');
      $form['#prefix'] = '<div id="' . $id . '">';
      $form['#suffix'] = '</div>';

      $form['inschrijven'] = array(
        '#type' => 'submit',
        '#value' => t('Subscribe'),
        '#ajax' => array(
          'callback' => 'culturefeed_mailing_newsletter_form_ajax',
          'wrapper' => $id,
          'method' => 'replace',
          'effect' => 'fade',
        ),
      );
    }
  }

  return $form;

}

/**
 * Validateh the newsletter block form: send the request to the API.
 */
function culturefeed_mailing_newsletter_block_form_validate($form, $form_state) {

  if (form_get_errors()) {
    return;
  }

  if (CULTUREFEED_API_LIGHT_ID_ALLOWED) {

    try {
      $zip = !empty($form_state['values']['zip']) ? $form_state['values']['zip'] : '';
      culturefeed_mailing_subscribe_user_light($form_state['values']['mail'], variable_get('culturefeed_mailing_list', ''), $zip);
    }
    catch (CultureFeed_Exception $e) {

      // If user was already subscribed, don't show a message.
      if ($e->error_code != CultureFeed::CODE_MAILING_ALREADY_SUBSCRIBED) {
        form_set_error('submit', t('An error occurred while subscribing, please try again later.'));
        return;
      }

    }
    catch (Exception $e) {
      form_set_error('submit', t('An error occurred while subscribing, please try again later.'));
      return;
    }

  }

}

/**
 * Submit the newsletter block form.
 */
function culturefeed_mailing_newsletter_block_form_submit($form, &$form_state) {

  $query = array('email' => $form_state['values']['mail']);
  if (!empty($form_state['values']['zip'])) {
    $query['zip'] = $form_state['values']['zip'];
    _culturefeed_mailing_set_postal_to_cookie($query['zip']);
  }

  if (CULTUREFEED_API_LIGHT_ID_ALLOWED) {
    $form_state['redirect'] = 'subscribe/subscribed';

  }
  elseif (DrupalCultureFeed::isCultureFeedUser()) {
    $form_state['redirect'] = array('subscribe', array('query' => $query));
  }
  else {
    $query['destination'] = 'subscribe';
    $form_state['redirect'] = array(
      'authenticated', array('query' => $query),
    );
  }

}

/**
 * Ajax callback for the newsletter form.
 */
function culturefeed_mailing_newsletter_form_ajax($form, $form_state) {

  // Show form on errors.
  if (form_get_errors()) {
    return $form;
  }
  // Or redirect if ok.
  else {

    ctools_include('ajax');

    $commands = array();
    $commands[] = ctools_ajax_command_redirect(url($form_state['redirect']));

    return array(
      '#type' => 'ajax',
      '#commands' => $commands
    );
  }

}

/**
 * Load a culturefeed mailing.
 *
 * @param int $id
 *   Mailing id.
 *
 * @return Culturefeed_Mailing
 *   Returns a mailing if found, else FALSE.
 */
function culturefeed_mailing_load($id) {
  try {
    return DrupalCultureFeed_Mailing::getMailing($id);
  }
  catch (Exception $e) {
    return FALSE;
  }
}

/**
 * Load a culturefeed template.
 *
 * @param int $id
 *   Template id.
 *
 * @return CultureFeed_Template
 *   Returns a template if found, else FALSE.
 */
function culturefeed_template_load($id) {
  try {
    return DrupalCultureFeed_Mailing::getTemplate($id);
  }
  catch (Exception $e) {
    return FALSE;
  }
}
