<?php
/**
 * @file
 * CultureFeed Pages makes it possible to view / manage pages.
 */

module_load_include('inc', 'culturefeed_pages', 'includes/helpers');

/**
 * Default actortype.
 */
define('CULTUREFEED_ACTORTYPE_ORGANISATION', '8.11.0.0.0');

/**
 * Total items per page for the admin pages and the agenda block.
 */
define('CULTUREFEED_PAGES_ADMIN_EVENTS_COUNT', 50);
define('CULTUREFEED_PAGES_ADMIN_NEWS_COUNT', 50);
define('CULTUREFEED_PAGES_BASIC_ITEMS_PER_PAGE', 50);

/**
 * Url to the edit page of an event inside uitdatabank.
 */
define('CULTUREFEED_PAGES_UITDATABANK_EVENT_URL', 'http://www.uitdatabank.be/2/Item/EventDetail/');

define('CULTUREFEED_PAGE_NEARBY_PAGES_RANGE', 15);
define('CULTUREFEED_PAGE_NEARBY_PAGES_COUNT', 5);

/**
 * Implements hook_theme().
 */
function culturefeed_pages_theme() {

  $path = drupal_get_path('module', 'culturefeed_pages') . '/theme';

  return array(
    'culturefeed_pages_basic_search_page' => array(
      'variables' => array(
        'form' => NULL,
        'results' => array(),
        'total_results' => 0,
        'search' => '',
        'zipcode' => '',
      ),
      'path' => $path,
      'file' => 'theme.inc',
      'template' => 'culturefeed-pages-basic-search-page',
    ),
    'culturefeed_pages_basic_search_result_item' => array(
      'variables' => array('item' => NULL),
      'path' => $path,
      'file' => 'theme.inc',
      'template' => 'culturefeed-pages-basic-search-result-item',
    ),
    'culturefeed_page' => array(
      'variables' => array('item' => NULL),
      'path' => $path,
      'file' => 'theme.inc',
      'template' => 'culturefeed-page',
    ),
    'culturefeed_page_summary' => array(
      'variables' => array('item' => NULL),
      'path' => $path,
      'file' => 'theme.inc',
      'template' => 'culturefeed-page-summary',
    ),
    'culturefeed_page_invisible' => array(
      'variables' => array('page' => NULL),
      'path' => $path,
      'file' => 'theme.inc',
      'template' => 'culturefeed-page-invisible',
    ),
    'culturefeed_pages_fellow_members_block' => array(
      'variables' => array(
        'account' => NULL,
        'page' => NULL,
        'members' => array(),
      ),
      'path' => $path,
      'file' => 'theme.inc',
      'template' => 'culturefeed-pages-fellow-members-block',
    ),
    'culturefeed_pages_request_admin_membership_block' => array(
      'variables' => array(
        'page' => NULL,
      ),
      'path' => $path,
      'file' => 'theme.inc',
      'template' => 'culturefeed-pages-request-admin-membership-block',

    ),
    'culturefeed_pages_following_pages_block' => array(
      'variables' => array('following' => array()),
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_pages_block_admin_options' => array(
      'variables' => array(
        'admin_menu' => NULL,
        'logged_in_as_page_admin' => FALSE,
        'account' => NULL,
        'page' => NULL,
        'page_notifications' => NULL,
      ),
      'path' => $path,
      'file' => 'theme.inc',
      'template' => 'culturefeed-pages-block-admin-options',
    ),
    'culturefeed_pages_page_menu_item' => array(
      'variables' => array('title' => '', 'url' => '', 'description' => ''),
      'template' => 'culturefeed-pages-page-menu-item',
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_pages_user_search_result' => array(
      'variables' => array(
        'result' => NULL,
        'page' => NULL,
        'user_list' => NULL,
      ),
      'template' => 'culturefeed-pages-user-search-result',
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_pages_followers_block' => array(
      'variables' => array(
        'page' => NULL,
        'followers' => array(),
        'num_followers' => NULL,
      ),
      'path' => $path,
      'file' => 'theme.inc',
      'template' => 'culturefeed-pages-followers-block',
    ),
    'culturefeed_pages_members_block' => array(
      'variables' => array(
        'page' => NULL,
        'members' => array(),
        'num_members' => NULL,
      ),
      'path' => $path,
      'file' => 'theme.inc',
      'template' => 'culturefeed-pages-members-block',
    ),
    'culturefeed_pages_nearby_pages' => array(
      'variables' => array(
        'results' => array(),
        'results_found' => 0,
        'show_more' => FALSE,
        'more_text' => '',
        'more_url' => '',
        'tooltip_text' => '',
      ),
      'path' => $path,
      'file' => 'theme.inc',
      'template' => 'culturefeed-pages-nearby-pages',
    ),
    'culturefeed_pages_events_admin_page' => array(
      'variables' => array('results' => array(), 'page' => NULL),
      'template' => 'culturefeed-pages-events-admin-page',
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_pages_page_agenda' => array(
      'variables' => array(
        'items' => array(),
        'page' => NULL,
        'is_admin' => FALSE,
        'read_more_path' => '',
      ),
      'template' => 'culturefeed-pages-page-agenda',
      'path' => $path,
    ),
    'culturefeed_pages_follow_success_message' => array(
      'variables' => array(
        'page' => NULL,
      ),
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_pages_unfollow_success_message' => array(
      'variables' => array(
        'page' => NULL,
      ),
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_pages_page_my_pages' => array(
      'variables' => array(
        'build' => array(),
        'user' => NULL,
       ),
      'path' => $path,
      'template' => 'culturefeed-pages-page-my-page',
      'file' => 'theme.inc',
    ),
    'culturefeed_pages_login_required_message' => array(
      'variables' => array('page' => NULL, 'action' => ''),
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_pages_admin_request_link' => array(
      'variables' => array('page' => NULL, 'cf_user' => NULL),
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_pages_membership_delete_not_possible' => array(
      'variables' => array('page' => NULL),
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_pages_block_page_suggestions' => array(
      'variables' => array('suggestions' => '', 'filter_form' => NULL),
      'template' => 'culturefeed-pages-block-page-suggestions',
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_pages_page_suggestion_list' => array(
      'variables' => array('suggestions' => array()),
      'template' => 'culturefeed-pages-page-suggestion-list',
      'path' => $path,
      'file' => 'theme.inc',
    ),
    'culturefeed_pages_page_suggestion_list_item' => array(
      'variables' => array('item' => NULL),
      'path' => $path,
      'file' => 'theme.inc',
      'template' => 'culturefeed-pages-page-suggestion-list-item',
    ),
    'culturefeed_pages_block_page_timeline' => array(
      //'variables' => array('time_line' => NULL, 'page' => NULL),
      'variables' => array('filter_form' => NULL, 'time_line' => NULL, 'page' => NULL),
      'path' => $path,
      'template' => 'culturefeed-pages-block-page-timeline',
      'file' => 'theme.inc',
    ),
    'culturefeed_pages_news_admin_page' => array(
      'variables' => array('results' => array(), 'page' => NULL),
      'template' => 'culturefeed-pages-news-admin-page',
      'path' => $path,
      'file' => 'theme.inc',
    ),
  );

}

/**
 * Implements hook_menu().
 */
function culturefeed_pages_menu() {

  $items = array();

  $items['pages/search'] = array(
    'title callback' => 'culturefeed_pages_basic_search_title',
    'page callback' => 'culturefeed_pages_page_basic_search',
    'access arguments' => array('access content'),
    'file' => 'includes/pages.inc',
  );

  $items['pages/add'] = array(
    'title' => 'Create your own page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_pages_add_form'),
    'access callback' => 'culturefeed_is_culturefeed_user',
    'file' => 'includes/pages.inc',
  );

  $items['agenda/g/%/%culturefeed_pages_page'] = array(
    'title callback' => 'culturefeed_pages_detail_title',
    'title arguments' => array(3),
    'page callback' => 'culturefeed_pages_detail_page',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['pages/%culturefeed_pages_page/edit'] = array(
    'title' => 'Edit page',
    'title callback' => 'culturefeed_pages_detail_title',
    'title arguments' => array(1, 'edit'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_pages_edit_page_form', 1),
    'access callback' => 'culturefeed_pages_edit_page_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['pages/%culturefeed_pages_page/remove/%'] = array(
    'title' => 'Delete page',
    'page callback' => 'culturefeed_pages_remove_page_confirm',
    'page arguments' => array(1, 3),
    'access callback' => 'culturefeed_pages_edit_page_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['pages/%culturefeed_pages_page/publish/%'] = array(
    'title' => 'Publish page',
    'page callback' => 'culturefeed_pages_publish_page_confirm',
    'page arguments' => array(1),
    'access callback' => 'culturefeed_pages_edit_page_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['pages/%culturefeed_pages_page/configuration'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_pages_configuration_page_form', 1),
    'access callback' => 'culturefeed_pages_edit_page_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['pages/%culturefeed_pages_page/events'] = array(
    'title' => 'Activities',
    'page callback' => 'culturefeed_pages_page_events',
    'page arguments' => array(1),
    'access callback' => 'culturefeed_pages_edit_page_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['pages/%culturefeed_pages_page/news'] = array(
    'title' => 'News',
    'page callback' => 'culturefeed_pages_page_manage_news',
    'page arguments' => array(1),
    'access callback' => 'culturefeed_pages_edit_page_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['pages/%culturefeed_pages_page/news/add'] = array(
    'title' => 'Add a news item',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_pages_add_news_form', 1),
    'access callback' => 'culturefeed_pages_edit_page_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['pages/%culturefeed_pages_page/news/delete/%culturefeed_social_news_item'] = array(
    'title' => 'Delete news item',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_pages_delete_news_form', 1, 4),
    'access callback' => 'culturefeed_pages_edit_page_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['pages/%culturefeed_pages_page/members/%'] = array(
    'title' => 'Members',
    'page callback' => 'culturefeed_pages_page_manage_members',
    'page arguments' => array(1, 3),
    'access callback' => 'culturefeed_pages_edit_page_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'includes/members.inc',
  );

  $items['pages/%culturefeed_pages_page/membership/%cf_user/edit/%'] = array(
    'title' => 'Members',
    'page callback' => 'culturefeed_pages_page_manage_members',
    'page arguments' => array(1, 5, 3),
    'access callback' => 'culturefeed_pages_edit_page_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'includes/members.inc',
  );

  $items['pages/%culturefeed_pages_page/membership/%cf_user/delete/%'] = array(
    'title' => 'Delete member',
    'page callback' => 'culturefeed_pages_page_delete_member',
    'page arguments' => array(1, 3, 5),
    'access callback' => 'culturefeed_pages_edit_page_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'includes/members.inc',
  );

  $items['pages/%culturefeed_pages_page/membership/add/%cf_user/%'] = array(
    'title' => 'Add member',
    'page callback' => 'culturefeed_pages_page_add_member',
    'page arguments' => array(1, 4, 5),
    'access callback' => 'culturefeed_pages_edit_page_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'includes/members.inc',
  );

  $items['pages/%culturefeed_pages_page/membership/request-admin/%'] = array(
    'title' => 'Application for administrator of the page',
    'page callback' => 'culturefeed_pages_page_request_admin_membership',
    'page arguments' => array(1, 4),
    'access callback' => 'culturefeed_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'includes/members.inc',
  );

  $items['pages/%culturefeed_pages_page/membership/delete/%'] = array(
    'title' => 'Remove myself as a member',
    'page callback' => 'culturefeed_pages_page_delete_member',
    'page arguments' => array(1, NULL, 4),
    'access callback' => 'culturefeed_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'includes/members.inc',
  );

  $items['pages/%culturefeed_pages_page/membership/request-approve/%cf_user'] = array(
    'title' => 'Add member as administrator',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_pages_page_request_admin_membership_approved', 1, 4),
    'access callback' => 'culturefeed_pages_edit_page_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'includes/members.inc',
  );

  $items['pages/%culturefeed_pages_page/membership/request-validated-admin/%'] = array(
    'title' => 'Request to become validated admin',
    'page callback' => 'culturefeed_pages_page_request_validated_admin',
    'page arguments' => array(1, 4),
    'access callback' => 'culturefeed_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'includes/members.inc',
  );

  $items['pages/switch/%culturefeed_pages_page'] = array(
    'title' => 'Change active page',
    'page callback' => 'culturefeed_pages_switch_page',
    'page arguments' => array(2),
    'access callback' => 'culturefeed_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['ajax/culturefeed/pages/page-suggestion'] = array(
    'page callback' => 'culturefeed_pages_page_suggestion_autocomplete_page',
    'page arguments' => array(4),
    'access callback' => 'culturefeed_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['ajax/culturefeed/pages/page-suggestion/ids'] = array(
    'page callback' => 'culturefeed_pages_page_suggestion_autocomplete_page',
    'page arguments' => array(5, TRUE),
    'access callback' => 'culturefeed_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['culturefeed/pages/join/%/%culturefeed_pages_page'] = array(
    'page callback' => 'culturefeed_pages_page_join',
    'page arguments' => array(3, 4),
    'access callback' => 'culturefeed_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['culturefeed/pages/follow/%/%culturefeed_pages_page'] = array(
    'title' => 'Follow page',
    'page callback' => 'culturefeed_pages_page_follow',
    'page arguments' => array(3, 4),
    'access callback' => 'culturefeed_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['culturefeed/pages/defollow/%/%culturefeed_pages_page'] = array(
    'title' => 'Unfollow page',
    'page callback' => 'culturefeed_pages_page_follow',
    'page arguments' => array(3, 4, FALSE),
    'access callback' => 'culturefeed_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['culturefeed/pages'] = array(
    'title' => 'My pages',
    'page callback' => 'culturefeed_pages_page_my_pages',
    'access callback' => 'culturefeed_is_culturefeed_user',
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['culturefeed/ajax/page/agenda/%culturefeed_pages_page'] = array(
    'page callback' => 'culturefeed_pages_page_ajax_get_agenda',
    'page arguments' => array(4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['admin/config/culturefeed/pages-ui'] = array(
    'title' => 'CultureFeed Pages UI',
    'description' => t('Change CultureFeed Pages UI settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_pages_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/admin.inc',
  );

  return $items;

}

/**
 * Implements hook_block_info().
 */
function culturefeed_pages_block_info() {

  $blocks = array();

  $blocks['user-fellow-members'] = array(
    'info' => t('Culturefeed pages: fellow members from user'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['pages-user-follows'] = array(
    'info' => t("Culturefeed pages: pages i'm following"),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $blocks['pages-admin-options'] = array(
    'info' => t("Culturefeed pages: page options"),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['pages-request-admin-membership'] = array(
    'info' => t("Culturefeed pages: request to become admin member"),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $blocks['pages-admin-menu'] = array(
    'info' => t("Culturefeed pages: page admin menu"),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $blocks['followers'] = array(
    'info' => t('Culturefeed pages: followers'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['members'] = array(
    'info' => t('Culturefeed pages: members'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['nearby-pages'] = array(
    'info' => t('Culturefeed pages: nearby pages'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['page-suggestions'] = array(
    'info' => t('Culturefeed pages: page suggestions'),
    'cache' => DRUPAL_NO_CACHE,
  );

  if (module_exists('culturefeed_social')) {
    $blocks['page-timeline'] = array(
      'info' => t("Culturefeed pages: page timeline"),
      'cache' => DRUPAL_NO_CACHE,
    );
  }

  if (module_exists('culturefeed_agenda')) {
    $blocks['page-agenda'] = array(
      'info' => t('Culturefeed pages: page agenda'),
      'cache' => DRUPAL_NO_CACHE,
    );
  }

  return $blocks;

}

/**
 * Implements hook_block_configure().
 */
function culturefeed_pages_block_configure($delta) {

  $form = array();

  if ($delta == 'page-agenda') {
    $form['pages_block_agenda_total_items'] = array(
      '#title' => t('Items to show per page'),
      '#type' => 'textfield',
      '#default_value' => variable_get('pages_block_agenda_total_items', 20),
    );
  }
  elseif ($delta == 'page-suggestions') {
    $form['pages_block_page_suggestions_query'] = array(
      '#title' => t('Query to use for the suggestions'),
      '#type' => 'textfield',
      '#default_value' => variable_get('pages_block_page_suggestions_query', ''),
      '#description' => t('Example: <strong>category_id:("8.11.0.0.0")</strong>'),
    );
    $form['pages_block_page_suggestions_total'] = array(
      '#title' => t('Total of suggestions to show'),
      '#type' => 'textfield',
      '#default_value' => variable_get('pages_block_page_suggestions_total', 10),
    );
    $form['pages_block_page_suggestions_distance'] = array(
      '#title' => t('Distance range of suggestions to search'),
      '#type' => 'textfield',
      '#default_value' => variable_get('pages_block_page_suggestions_distance', 5),
    );
  }

  return $form;

}

/**
 * Implements hook_block_save().
 */
function culturefeed_pages_block_save($delta, $edit) {

  if ($delta == 'page-agenda') {
    variable_set('pages_block_agenda_total_items', $edit['pages_block_agenda_total_items']);
  }
  elseif ($delta == 'page-suggestions') {
    variable_set('pages_block_page_suggestions_query', $edit['pages_block_page_suggestions_query']);
    variable_set('pages_block_page_suggestions_total', $edit['pages_block_page_suggestions_total']);
    variable_set('pages_block_page_suggestions_distance', $edit['pages_block_page_suggestions_distance']);
  }
}

/**
 * Implements hook_block_view().
 */
function culturefeed_pages_block_view($delta) {

  module_load_include('inc', 'culturefeed_pages', 'includes/blocks');

  switch ($delta) {

    case 'user-fellow-members':
      $account = menu_get_object('user');
      return culturefeed_pages_block_fellow_members($account);

    case 'pages-user-follows':
      $account = menu_get_object('user');
      return culturefeed_pages_block_pages_user_follows($account);

    case 'pages-admin-options':
      return culturefeed_pages_block_pages_admin_options();

    case 'pages-admin-menu':
      return culturefeed_pages_block_pages_admin_menu();

    case 'pages-request-admin-membership':
      $page = menu_get_object('culturefeed_pages_page', 3);
      return culturefeed_pages_block_pages_request_admin_membership($page);

    case 'page-timeline':
      $page = culturefeed_pages_get_viewed_page();
      return culturefeed_pages_block_page_timeline($page);

    case 'followers':
      $page = culturefeed_pages_get_viewed_page();
      return culturefeed_pages_block_followers($page);

    case 'members':
      $page = culturefeed_pages_get_viewed_page();
      return culturefeed_pages_block_members($page);

    case 'nearby-pages':
      $page = culturefeed_pages_get_viewed_page();
      return culturefeed_pages_block_nearby_pages($page);

    case 'page-agenda':
      $page = culturefeed_pages_get_viewed_page();
      return culturefeed_pages_block_page_agenda($page);

    case 'page-suggestions':
      return culturefeed_pages_block_page_suggestions();
  }

}

/**
 * Implements hook_user_login().
 *
 * @param $edit
 *   The array of form values submitted by the user.
 * @param $account
 *   The user object on which the operation was just performed.
 */
function culturefeed_pages_user_login(&$edit, $account) {

  // If it's your first membership and you don't have an active page yet,
  // also login as that page.
  try {

    $cf_user = DrupalCultureFeed::getLoggedInUser();
    if (!$cf_user) {
      return;
    }

    $memberships = $cf_user->pageMemberships;
    if (count($memberships) > 0) {

      $ids = array();
      foreach ($memberships as $membership) {
        $ids[] = $membership->page->getId();
      }

      $page = NULL;
      $account = DrupalCultureFeed::getLoggedInAccount();
      if (isset($account->data['culturefeed_pages_id']) && in_array($account->data['culturefeed_pages_id'], $ids)) {
        $preferred_page = culturefeed_pages_page_load($account->data['culturefeed_pages_id']);
        // Check if this page was not deleted.
        if ($preferred_page && $preferred_page->isVisible()) {
          $page = $preferred_page;
        }
      }

      // If there is no recollection of a previous state,
      // take the first membership as active one.
      if (empty($page)) {
        $membership = reset($memberships);
        $page = $membership->page;
      }

      culturefeed_pages_set_active_page($page);

    }

  }
  catch (Exception $e) {
    watchdog_exception('culturefeed_pages', $e);
  }

}

/**
 * Implements hook_culturefeed_ui_profile_box_dropdown_items().
 */
function culturefeed_pages_culturefeed_ui_profile_box_dropdown_items(CultureFeed_User $cultureFeedUser) {

  $items = array();

  $has_memberships = count($cultureFeedUser->pageMemberships);

  $items['my-page'] = array(
    'data' => t('My page'),
    'class' => 'my-page',
    'children' => array(
    ),
    'weight' => -19,
  );

  $items['manage-pages'] = array(
    'data' => l(t('Manage pages'), 'culturefeed/pages'),
    'class' => 'settings',
    'weight' => 20,
  );

  // The user is member of at least one page, login as ...
  if ($has_memberships) {

    $active_page = culturefeed_pages_get_active_page();
    $active_page_id = 0;

    if ($active_page) {

      $active_page_id = $active_page->getId();

      $items['my-page']['children'] = array(
        array('data' => culturefeed_search_detail_l('page', $active_page->getId(), $active_page->getName())),
      );

    }
    else {
      $items['my-page']['children'] = array(
        array('data' => l(t('Search your page'), 'pages/search')),
      );
    }

    // If the user has more than 1 membership, allow him to switch pages.
    if ($has_memberships > 1) {

      $items['switch-page'] = array(
        'data' => t('Change active page'),
        'class' => 'switch-page',
        'children' => array(),
        'weight' => -18,
      );

      foreach ($cultureFeedUser->pageMemberships as $membership) {
        if ($active_page_id != $membership->page->getId()) {
          $items['switch-page']['children'][] = array(
            'data' => l($membership->page->getName(), 'pages/switch/' . $membership->page->getId())
          );
        }
      }
    }

  }
  // Provide the user with interesting pages so they can login as Page.
  else {
    $items['my-page']['children'] = array(
      array('data' => l(t('Search your page'), 'pages/search')),
    );
  }

  return $items;

}

/**
 * Implements hook_culturefeed_pages_page_admin_menu().
 */
function culturefeed_pages_culturefeed_pages_page_admin_menu(CultureFeed_Cdb_Item_Page $page) {

  return array(
    'info' => array(
      'title' => t('Details & Layout'),
      'url' => 'pages/' . $page->getId() . '/edit',
      'description' => t('Manage page information, contact details, layout ... .'),
      'weight' => -20,
    ),
    'settings' => array(
      'title' => t('Features'),
      'url' => 'pages/' . $page->getId() . '/configuration',
      'description' => t('Allow users to follow your page, request membership, add comments, ... .'),
      'weight' => -19,
    ),
    'members' => array(
      'title' => t('Members, Rights & Roles'),
      'url' => 'pages/' . $page->getId() . '/members/nojs',
      'description' => t('Manage members, roles and rights.'),
      'weight' => -18,
    ),
    'events' => array(
      'title' => t('Activities'),
      'url' => 'pages/' . $page->getId() . '/events',
      'description' => t('Manage your activities and comments.'),
      'weight' => -17,
    ),
    'news' => array(
      'title' => t('News'),
      'url' => 'pages/' . $page->getId() . '/news',
      'description' => t('Manage your news.'),
      'weight' => -16,
    ),
  );

}

/**
 * Implements hook_culturefeed_ui_profile_menu().
 */
function culturefeed_pages_culturefeed_ui_profile_menu() {

  return array(
    'pages' => array(
      'title' => t('My pages'),
      'url' => 'culturefeed/pages',
      'description' => t('Manage the pages where you\'re member off or that you follow'),
      'weight' => -17,
    ),
  );

}

/**
 * Implements hook_culturefeed_search_page_info().
 */
function culturefeed_pages_culturefeed_search_page_info() {
  return array(
    'pages' => array(
      'id' => 'pages',
      'path' => 'agenda/pages',
      'page_title' => t('Pages'),
      'search_title' => t('Pages'),
      'class_name' => 'CultureFeedPagesSearchPage',
      'sort_default' => 0, // key for follow count
      'sort_options' => array(
        array(
          'value' => 'pagefollow_count',
          'label' => t('Number of followers'),
          'exposed' => TRUE,
          'query' => 'pagefollow_count desc',
        ),
        array(
          'value' => 'pagemember',
          'label' => t('Number of members'),
          'exposed' => TRUE,
          'query' => 'pagemember_count desc',
        ),
      ),
    ),
  );
}

/**
 * Load a culturefeed page.
 * @param $id
 *   Id to load.
 * @return mixed
 *   FALSE if not found, otherwise CultuurNet\Search\ActivityStatsExtendedEntity.
 */
function culturefeed_pages_page_load($id) {

  $pages = &drupal_static('culturefeed_search_items_load', array());

  if (isset($pages[$id])) {
    return $pages[$id];
  }

  try {

    $cf_pages = DrupalCultureFeed::getConsumerInstance()->pages();
    $pages[$id] = $cf_pages->getPage($id);
    return $pages[$id];

  }
  catch (Exception $e) {
    watchdog_exception('culturefeed_pages', $e);
  }

  return FALSE;

}

/**
 * Title callback for the join search page.
 */
function culturefeed_pages_basic_search_title() {
  return format_string(t('Your page on @sitename'), array('@sitename' => variable_get('site_name')));
}

/**
 * Title callback for the 'page' detail page.
 */
function culturefeed_pages_detail_title($page, $op = 'view') {

  if ($op == 'view') {
    return $page->getName();
  }
  else {
    $title = $page->getName();

    $address = $page->getAddress();
    if (!empty($address)) {
      $city = $address->getCity();
      if (!empty($city)) {
        $title .= ' - ' . $address->getCity();
      }
    }

    return $title;
  }
}

/**
 * Access callback to indicate whether the current has can administer
 * the page.
 * @param CultureFeed_Cdb_Item_Page $page
 */
function culturefeed_pages_edit_page_access($page) {

  $cultureFeedUser = DrupalCultureFeed::getLoggedInUser();
  if (empty($cultureFeedUser)) {
    return FALSE;
  }

  // Calculate the number of pages where the current user is ADMIN.
  if ($cultureFeedUser->adminPagesCount > 0) {
    $adminMemberships = $cultureFeedUser->getMembershipsByRole(CultureFeed_Pages_Membership::MEMBERSHIP_ROLE_ADMIN);
  }

  // Check the current page against the current active admin page.
  return isset($adminMemberships[$page->getId()]) && $page->getId() === culturefeed_pages_get_active_page_id();

}

/**
 * Access callback to indicate whether the current user can see the page
 * @param CultureFeed_Cdb_Item_Page $page
 */
function culturefeed_pages_view_page_access($page) {
  return $page->isVisible();
}

/**
 * Implements hook_culturefeed_ui_profile_box_nick_alter().
 * @param unknown_type $culture_feed_profile_name
 */
function culturefeed_pages_culturefeed_ui_profile_box_nick_alter(&$culture_feed_profile_name) {

  $active_page = culturefeed_pages_get_active_page();

  if (isset($active_page)) {
    // Extend the current nickname.
    $nick = $culture_feed_profile_name['nick'] . ' ' . t('from') . ' ' . $active_page->getName();
    $culture_feed_profile_name['nick'] = $nick;

    // Create a new link for the same properties.
    $culture_feed_profile_name['link'] = l($nick, 'user/' . $culture_feed_profile_name['uid']);
  }

}

/**
 * Submit the edit membership form through ajax.
 */
function culturefeed_pages_edit_membership_ajax_form_submit($form, &$form_state) {

  // If the submit was successfully done. Show the non-form row again.
  if (isset($form_state['#success'])) {

    $build = array();
    try {

      $cf_pages = DrupalCultureFeed::getLoggedInUserInstance()->pages();
      $user_list = $cf_pages->getUserList($form['#membership']->page->getId(),  array(CultureFeed_Pages_Membership::MEMBERSHIP_ROLE_ADMIN, CultureFeed_Pages_Membership::MEMBERSHIP_ROLE_MEMBER));
      $build = culturefeed_pages_manage_members_list($form['#membership']->page, $user_list);
    }
    catch (Exception $e) {
      watchdog_exception('culturefeed_pages', $e);
    }

    $commands = array(
      ajax_command_html('#manage-members', render($build)),
      ajax_command_prepend('#manage-members', theme('status_messages')),
    );

    ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
    exit;

  }

  return $form;

}


/**
 * Implements hook_form_{culturefeed_social_base_comment_form}_alter().
 */
function culturefeed_pages_form_culturefeed_social_base_comment_form_alter(&$form, &$form_state) {

  if (!culturefeed_is_culturefeed_user()) {
    return;
  }

  try {

    $cultureFeedUser = DrupalCultureFeed::getLoggedInUser();

    if (!empty($cultureFeedUser->pageMemberships)) {
      $options = array();
      foreach ($cultureFeedUser->pageMemberships as $membership) {
        $options[$membership->page->getId()] = $membership->page->getName();
      }

      $form['on_behalf_of'] = array(
        '#type' => 'select',
        '#title' => $form_state['config']->onBehalfOfMessage,
        '#default_value' => culturefeed_pages_get_active_page_id(),
        '#options' => $options,
        '#attributes' => array('class' => array('on-behalf-of')),
        '#weight' => 0,
      );
    }
  }
  catch (Exception $e) {
    watchdog_exception('culturefeed_pages', $e);
  }
}

/**
 * Show a filter form for the page suggestions block.
 */
function culturefeed_pages_page_suggestions_filter_form() {

  $postal = '';
  if (!empty($_COOKIE['culturefeed_pages_suggestions_postal'])) {
    $postal = $_COOKIE['culturefeed_pages_suggestions_postal'];
  }
  elseif (culturefeed_is_culturefeed_user()) {

    try {
      $cf_user = DrupalCultureFeed::getLoggedInUser();
      $postal = $cf_user->zip;
    }
    catch (Exception $e) {
      watchdog_exception('culturefeed_pages', $e);
    }
  }

  $form = array();

  $form['city'] = array(
    '#type' => 'textfield',
    '#title' => t('Find pages nearby'),
    '#autocomplete_path' => 'autocomplete/culturefeed/city-suggestion',
    '#attributes' => array(
      'placeholder' => t('Zipcode or city'),
      // This class is used to enable the autosubmit.
      'class' => array('auto-submit'),
    ),
    '#default_value' => $postal,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save location'),
    '#ajax' => array(
      'callback' => 'culturefeed_pages_page_suggestions_ajax_filter_submit',
    ),
  );

  return $form;
}

/**
 * Show a filter form for the timeline.
 */
function culturefeed_pages_timeline_filter_form($form, $form_state, $default_filter, $page_id) {

  $types = culturefeed_social_get_activity_filter_options(TRUE);
   
  $options = array(
    'all' => t('All'),
  );

  foreach ($types as $key => $type) {
    if ($key == CultureFeed_Activity::TYPE_IK_GA) {
      $options[$key] = $type->subject;
    } else {
      $options[$key] = $type->label;
    }
  }
  
  // Options we don't need here
  unset($options[CultureFeed_Activity::TYPE_PAGE_CREATED]);

  $form['filter'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#title' => t('Filter timeline on'),
    '#default_value' => $default_filter,
    '#ajax' => array(
      'callback' => 'culturefeed_pages_ajax_timeline_filter',
    ),
  );

  $form['page_id'] = array(
    '#type' => 'hidden',
    '#value' => $page_id,
  );

  return $form;
}

/**
 * Submit the ajax filter form for suggestions. Return the new list.
 */
function culturefeed_pages_page_suggestions_ajax_filter_submit($form, $form_state) {

  // Also set $_COOKIE for later use in code.
  setcookie('culturefeed_pages_suggestions_city', $form_state['values']['city'], $_SERVER['REQUEST_TIME'] + 60 * 60 * 24 * 30, '/');
  $_COOKIE['culturefeed_pages_suggestions_city'] = $form_state['values']['city'];

  $build = array();
  $build[] = array(
    '#markup' => culturefeed_pages_get_page_suggestions_list(),
  );

  $commands = array(ajax_command_html('#page-suggestions', render($build)));

  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

/**
 * Ajax callback, filter the timeline filter.
 */
function culturefeed_pages_ajax_timeline_filter($form, $form_state) {

  try {
    $type = $form_state['values']['filter'] == 'all' ? NULL : array($form_state['values']['filter']);
    $time_line = DrupalCultureFeed::getConsumerInstance()->pages()->getTimeline($form_state['values']['page_id'], NULL, $type);
  }
  catch (Exception $e) {
    watchdog_exception('culturefeed_pages', $e);
    return;
  }

  if ($time_line->total == 0) {
    $activities = t('No activities found');
  }
  else {
    $activities = theme('culturefeed_social_user_activity_wall', array('activities' => $time_line));
  }

  $commands = array();
  $commands[] = ajax_command_html('#timeline', $activities);

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Load callback for a news item of a page.
 */
function culturefeed_news_item_load($news_item_id) {
  $news_item = DrupalCultureFeed::loadActivity($news_item_id);
  return empty($news_item) ? FALSE : $news_item;
}