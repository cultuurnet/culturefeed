<?php
use Symfony\Component\Console\Output\NullOutput;

/**
 * @file
 * Performs searches to the Cultuurnet api.
 */
define('CULTUREFEED_AGENDA_ACTOR_PROGRAM_NUM_ITEMS', 15);

module_load_include('inc', 'culturefeed_agenda', 'includes/helpers');

/**
 * Implements hook_theme().
 */
function culturefeed_agenda_theme() {

  $theme = array();
  $path = drupal_get_path('module', 'culturefeed_agenda') . '/theme';
  $item_types = array('event', 'production', 'actor');

  foreach ($item_types as $type) {

    $theme['culturefeed_' . $type . '_summary'] = array(
      'variables' => array('item' => NULL),
      'template' => 'culturefeed-' . $type . '-summary',
      'path' => $path,
      'file' => 'theme.inc',
    );

    $theme['culturefeed_' . $type . '_short_summary'] = array(
      'variables' => array('item' => NULL),
      'template' => 'culturefeed-' . $type . '-short-summary',
      'path' => $path,
      'file' => 'theme.inc',
    );

    $theme['culturefeed_' . $type . '_mini_summary'] = array(
      'variables' => array('item' => NULL),
      'template' => 'culturefeed-' . $type . '-mini-summary',
      'path' => $path,
      'file' => 'theme.inc',
    );
    $theme['culturefeed_' . $type] = array(
      'variables' => array('item' => NULL),
      'template' => 'culturefeed-' . $type,
      'path' => $path,
      'file' => 'theme.inc',
    );

  }

  $theme['culturefeed_agenda_actor_program'] = array(
    'variables' => array('items' => array(), 'actor' => NULL),
    'template' => 'culturefeed-agenda-actor-program',
    'path' => $path,
    'file' => 'theme.inc',
  );

  $theme['culturefeed_agenda_actor_program_item'] = array(
    'variables' => array('item' => array()),
    'template' => 'culturefeed-agenda-actor-program-item',
    'path' => $path,
    'file' => 'theme.inc',
  );

  $theme['culturefeed_agenda_production_program'] = array(
    'variables' => array('items' => array(), 'provinces' => array()),
    'template' => 'culturefeed-agenda-production-program',
    'path' => $path,
    'file' => 'theme.inc',
  );

  $theme['culturefeed_agenda_related_activities'] = array(
    'variables' => array('results' => array()),
    'template' => 'culturefeed-agenda-related-activities',
    'path' => $path,
    'file' => 'theme.inc',
  );

  $theme['culturefeed_agenda_event_types'] = array(
    'variables' => array('items' => array()),
    'template' => 'culturefeed-agenda-event-types',
    'path' => $path,
    'file' => 'theme.inc',
  );

  $theme['culturefeed_agenda_block_nearby_activities'] = array(
    'variables' => array(
      'nearby_activities' => '',
      'filter_form' => NULL,
      'change_location_link' => '',
      'all_activities_for_location_link' => '',
      'all_activities_for_location_raw_link' => '',
      'location_string' => '',
    ),
    'template' => 'culturefeed-agenda-block-nearby-activities',
    'path' => $path,
    'file' => 'theme.inc',
  );
  $theme['culturefeed_agenda_nearby_activities_list'] = array(
    'variables' => array('activities' => array()),
    'template' => 'culturefeed-agenda-nearby-activities-list',
    'path' => $path,
    'file' => 'theme.inc',
  );
  $theme['culturefeed_agenda_nearby_activities_list_item'] = array(
    'variables' => array('item' => array()),
    'template' => 'culturefeed-agenda-nearby-activities-list-item',
    'path' => $path,
    'file' => 'theme.inc',
  );

  $theme['culturefeed_agenda_de_lijn_widget'] = array(
    'variables' => array('item' => ''),
    'template' => 'culturefeed-agenda-delijn-widget',
    'path' => $path,
    'file' => 'theme.inc',
  );

  $theme['culturefeed_agenda_travel_map'] = array(
    'variables' => array(),
    'template' => 'culturefeed-agenda-travel-map',
    'path' => $path,
  );

  $theme['culturefeed_agenda_actors_nearby'] = array(
    'variables' => array('items' => array()),
    'template' => 'culturefeed-agenda-actors-nearby',
    'path' => $path,
    'file' => 'theme.inc',
  );

  $theme['culturefeed_agenda_search_block_field_settings'] = array(
    'render element' => 'element',
    'path' => $path,
    'file' => 'theme.inc',
  );

	$theme['culturefeed_agenda_organiser_events'] = array(
		'variables' => array('items' => array(), 'organiser' => NULL),
		'template' => 'culturefeed-agenda-organiser-events',
		'path' => $path,
		'file' => 'theme.inc',
	);

	$theme['culturefeed_agenda_page_list_rss'] = array(
    'render element' => 'element',
    'path' => $path,
    'file' => 'theme.inc',
  );

  $theme['culturefeed_agenda_search_map'] = array(
    'variables' => array(),
    'template' => 'theme/culturefeed-agenda-search-map',
  );

  return $theme;

}

/**
 * Implements hook_menu().
 */
function culturefeed_agenda_menu() {

  $items = array();

  // Menu path for permalinks, redirects to correct one.
  $items['permalink/%culturefeed_search_item'] = array(
    'title' => 'Permalink',
    'page callback' => 'culturefeed_agenda_permalink_page',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  // Menu path for detail pages.
  $items['agenda/a/%/%culturefeed_agenda_actor'] = array(
    'title callback' => 'culturefeed_agenda_detail_title',
    'title arguments' => array(3),
    'page callback' => 'culturefeed_agenda_detail_page',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['agenda/e/%/%culturefeed_agenda_event'] = array(
    'title callback' => 'culturefeed_agenda_detail_title',
    'title arguments' => array(3),
    'page callback' => 'culturefeed_agenda_detail_page',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['agenda/p/%/%culturefeed_agenda_production'] = array(
    'title callback' => 'culturefeed_agenda_detail_title',
    'title arguments' => array(3),
    'page callback' => 'culturefeed_agenda_detail_page',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['delijn/agenda/a/%/%culturefeed_agenda_actor'] = array(
    'title callback' => 'culturefeed_agenda_detail_title',
    'title arguments' => array(4),
    'page callback' => 'culturefeed_agenda_page_de_lijn_widget',
    'page arguments' => array(4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['delijn/agenda/e/%/%culturefeed_agenda_event'] = array(
    'title callback' => 'culturefeed_agenda_detail_title',
    'title arguments' => array(4),
    'page callback' => 'culturefeed_agenda_page_de_lijn_widget',
    'page arguments' => array(4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['map/agenda/a/%/%culturefeed_agenda_actor'] = array(
    'title callback' => 'culturefeed_agenda_detail_title',
    'title arguments' => array(4),
    'page callback' => 'culturefeed_agenda_page_map',
    'page arguments' => array(4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['map/agenda/e/%/%culturefeed_agenda_event'] = array(
    'title callback' => 'culturefeed_agenda_detail_title',
    'title arguments' => array(4),
    'page callback' => 'culturefeed_agenda_page_map',
    'page arguments' => array(4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['admin/config/culturefeed/agenda'] = array(
    'title' => 'CultureFeed Agenda',
    'description' => 'Change CultureFeed Agenda settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_agenda_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/admin.inc',
  );

  // Autocomplete for event / production suggestions
  $items['autocomplete/culturefeed/activity-suggestion'] = array(
    'page callback' => 'culturefeed_agenda_activity_suggestion_autocomplete_page',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['autocomplete/culturefeed/activity-suggestion/past'] = array(
    'page callback' => 'culturefeed_agenda_activity_suggestion_autocomplete_page',
    'page arguments' => array(4, TRUE),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['ajax/culturefeed/related-activities/%'] = array(
    'page callback' => 'culturefeed_agenda_page_ajax_related_activities',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['ajax/culturefeed/nearby-activities'] = array(
    'page callback' => 'culturefeed_agenda_block_ajax_nearby_activities',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['ajax/culturefeed-agenda/actor-suggest'] = array(
    'page callback' => 'culturefeed_agenda_page_ajax_actor_suggest',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['autocomplete/culturefeed/agenda/actor-search'] = array(
    'page callback' => 'culturefeed_agenda_actor_search_autocomplete',
    'page arguments' => array(4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  return $items;

}

/**
 * Implements hook_culturefeed_search_page_info().
 */
function culturefeed_agenda_culturefeed_search_page_info() {
  return array(
    'activiteiten' => array(
      'id' => 'activiteiten',
      'path' => 'agenda/search',
      'page_title' => t('Agenda'),
      'search_title' => t('Activities'),
      'sort_default' => 1, // key for date
      'sort_options' => array(
        array(
          'value' => 'relevancy',
          'label' => t('Relevance'),
          'exposed' => TRUE,
          'query' => '',
          'default' => TRUE,
        ),
        array(
          'value' => 'date',
          'label' => t('Date'),
          'exposed' => TRUE,
          'query' => 'permanent asc,availableto asc,weight desc',
        ),
        array(
          'value' => 'agefrom',
          'label' => t('Age'),
          'exposed' => TRUE,
          'query' => 'agefrom asc',
        ),
        array(
          'value' => 'likes',
          'label' => t('Popularity'),
          'exposed' => TRUE,
          'query' => 'like_count desc',
        ),
        array(
          'value' => 'comments',
          'label' => t('Reactions'),
          'exposed' => FALSE,
          'query' => 'comment_count desc',
        ),
        array(
          'value' => 'importance',
          'label' => t('Importance'),
          'exposed' => FALSE,
          'query' => 'weight desc',
        ),
      ),
      'class_name' => 'CultureFeedAgendaPage',
      'weight' => -20,
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function culturefeed_agenda_block_info() {

  $blocks = array();

  // More info https://github.com/cultuurnet/culturefeed/wiki/Culturefeed-Agenda-Block-Related-activities
  $blocks['agenda-related-activities'] = array(
    'info' => t('Culturefeed agenda: related activities'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  // More info https://github.com/cultuurnet/culturefeed/wiki/Culturefeed-Agenda-Block-Nearby-activities
  $blocks['agenda-nearby-activities'] = array(
    'info' => t('Culturefeed agenda: nearby activities'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  // More info https://github.com/cultuurnet/culturefeed/wiki/Culturefeed-Agenda-Block-Search-events
  $blocks['agenda-search-block'] = array(
    'info' => t('Culturefeed agenda: search events'),
    'cache' => DRUPAL_NO_CACHE,
  );

  // More info https://github.com/cultuurnet/culturefeed/wiki/Culturefeed-Agenda-Block-Actor-program
  $blocks['actor-program'] = array(
    'info' => t('Culturefeed agenda: actor program'),
    'cache' => DRUPAL_NO_CACHE,
  );

  // More info https://github.com/cultuurnet/culturefeed/wiki/Culturefeed-Agenda-Block-Production-program
  $blocks['production-program'] = array(
    'info' => t('Culturefeed agenda: production program'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  // More https://github.com/cultuurnet/culturefeed/wiki/Culturefeed-Agenda-Block-Actor-search
  $blocks['agenda-actor-search'] = array(
    'info' => t('Culturefeed agenda: actor search'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  // More info https://github.com/cultuurnet/culturefeed/wiki/Culturefeed-Agenda-Block-Event-types
  $blocks['agenda-event-types'] = array(
    'info' => t('Culturefeed agenda: Event types'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  // More info https://github.com/cultuurnet/culturefeed/wiki/Culturefeed-Agenda-Block-Organiser-Events
	$blocks['agenda-organiser-events'] = array(
		'info' => t('Culturefeed agenda: Organiser events'),
		'cache' => DRUPAL_CACHE_PER_PAGE,
	);

  $blocks['agenda-search-map'] = array(
    'info' => t('Culturefeed agenda: Agenda search map'),
    'cache' => DRUPAL_NO_CACHE
  );

  return $blocks;

}

/**
 * Implements hook_block_configure().
 */
function culturefeed_agenda_block_configure($delta) {

  $form = array();

  if ($delta == 'agenda-related-activities') {

    $options = array('' => t('None'));
    $options += culturefeed_search_get_domains();
    $form['agenda_related_activities_context'] = array(
      '#title' => t('Category type to search related events'),
      '#type' => 'select',
      '#options' => $options,
      '#default_value' => variable_get('agenda_related_activities_context'),
      '#description' => t('The category type to use for searching related activities. Leave empty if you only want to search on range.')
    );

    $form['agenda_related_activities_range'] = array(
      '#title' => t('Radius to search in km'),
      '#type' => 'textfield',
      '#default_value' => variable_get('agenda_related_activities_range', 0),
      '#description' => t('Search on the given radius. Leave empty to skip radius search. Radius search will only be done when viewing an event.'),
    );

    $form['agenda_related_activities_extra_query'] = array(
      '#title' => t('Extra filter query for the result set'),
      '#type' => 'textfield',
      '#default_value' => variable_get('agenda_related_activities_extra_query'),
      '#description' => t('Make sure this is a correct solr query. Example title:mytitle'),
    );

    // sort_direction is no longer a seperate field. Add it to the sort field if variable exists.
    $sort_direction = variable_get('agenda_related_activities_sort_direction', '');
    $default_sort = variable_get('agenda_related_activities_sort') . ' ' . $sort_direction;

    $form['agenda_related_activities_sort'] = array(
      '#title' => t('Sort field'),
      '#type' => 'textfield',
      '#default_value' => $default_sort,
      '#description' => t('Field + direction to sort on. Example permanent asc, availableto asc, weight desc'),
    );

    $form['agenda_related_activities_total_items'] = array(
      '#title' => t('Items to show'),
      '#type' => 'textfield',
      '#default_value' => variable_get('agenda_related_activities_total_items', 5),
    );

  }

  elseif ($delta == 'agenda-nearby-activities') {

    $form['agenda_nearby_activities_extra_query'] = array(
      '#title' => t('Extra filter query'),
      '#type' => 'textfield',
      '#default_value' => variable_get('agenda_nearby_activities_extra_query', ''),
      '#description' => t('Make sure this is a correct solr query. Example title:mytitle'),
    );
    $form['agenda_nearby_activities_distance'] = array(
      '#title' => t('Distance for search area'),
      '#type' => 'textfield',
      '#default_value' => variable_get('agenda_nearby_activities_distance', '25'),
      '#description' => t('Enter the number of kilometers to determine search reach.'),
    );
    $form['agenda_nearby_activities_sort'] = array(
      '#title' => t('Results sort option'),
      '#type' => 'textfield',
      '#default_value' => variable_get('agenda_nearby_activities_sort', 'permanent asc, startdateday asc,weight desc'),
      '#description' => t('Enter the solr sort option.'),
    );
    $form['agenda_nearby_activities_amount'] = array(
      '#title' => t('Amount of results to show'),
      '#type' => 'textfield',
      '#default_value' => variable_get('agenda_nearby_activities_amount', 8),
      '#description' => t('Enter the number of results to show in the block.'),
    );
  }

  elseif ($delta == 'agenda-search-block') {

    $fields = array(
      'what' => 'What <div class="description">textfield to perform full text search</div>',
      'types' => 'Types <div class="description">selectbox with possible categories</div>',
      'where' => 'Where <div class="description">Autocomplete field with available regions and cities</div>',
      'when' => 'When <div class="description">selecbox with possible date ranges</div>',
    );

    $form['fields'] = array(
      '#type' => 'container',
      '#tree' => TRUE,
      '#theme' => 'culturefeed_agenda_search_block_field_settings',
    );

    // Show all possible filters, sorted by weight.
    $active_fields = variable_get('culturefeed_agenda_search_block_active_fields', array());
    foreach ($fields as $field => $title) {
      $form['fields'][$field]['enabled'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enabled'),
        '#title_display' => 'invisible',
        '#default_value' => isset($active_fields[$field]),
      );

      $form['fields'][$field]['title'] = array(
        '#markup' => $title,
      );

      $form['fields'][$field]['weight'] = array(
        '#type' => 'weight',
        '#title_display' => 'invisible',
        '#default_value' => isset($active_fields[$field]) ? $active_fields[$field] : 10,
      );
      $form['fields'][$field]['#weight'] = isset($active_fields[$field]) ? $active_fields[$field] : 10;
    }

    uasort($form['fields'], 'drupal_sort_weight');

    // Category to be used in the dropdown.
    $options = array('' => t('None'));
    $options += culturefeed_search_get_domains();

    $form['agenda_search_block_domain_id'] = array(
      '#title' => t('Categories to show in the dropdown'),
      '#type' => 'select',
      '#options' => $options,
      '#default_value' => variable_get('agenda_search_block_domain_id'),
      '#states' => array(
        'visible' => array(
          ':input[name="fields[types][enabled]"]' => array('checked' => TRUE),
        ),
      ),
    );

    $form['agenda_search_block_submit_value'] = array(
      '#title' => t('Text to be shown on the search button'),
      '#type' => 'textfield',
      '#default_value' => variable_get('agenda_search_block_submit_value', 'Search'),
    );

  }
  elseif ($delta == 'agenda-actor-search') {

    $options = culturefeed_search_get_actortype_categories();

    asort($options);
    $form['agenda_actor_autocomplete_categories'] = array(
      '#title' => t('Search following types.'),
      '#description' => t('Select the types of that can be shown in the autocomplete.'),
      '#type' => 'checkboxes',
      '#options' => $options,
      '#default_value' => variable_get('agenda_actor_autocomplete_categories', array_keys($options)),
    );

    $visibility_options = culturefeed_search_get_categories_by_domain('eventtype');
    asort($visibility_options);
    $form['agenda_actor_search_visibility'] = array(
      '#title' => t('Visibility settings.'),
      '#description' => t('Select the eventtypes where tis block may be visible.'),
      '#type' => 'checkboxes',
      '#options' => $visibility_options,
      '#default_value' => variable_get('agenda_actor_search_visibility', array_keys($visibility_options)),
    );

  }
  elseif ($delta == 'agenda-event-types') {

    $visibility_options = array();
    $query = db_select('culturefeed_search_terms', 'cst');
    $query->fields('cst', array('tid', 'name'));
    $query->condition('cst.did', 'eventtype');
    $query->isNull('cst.p1');
    $query->condition('language', culturefeed_search_get_preferred_language());

    $result = $query->execute();

    foreach ($result as $row) {
      // Don't show 'type onbepaald'.
      if ($row->tid != '0.51.0.0.0') {
        $visibility_options[$row->tid] = $row->name;
        $defaults[] = $row->tid;
      }
    }

    asort($visibility_options);
    $form['agenda_menu_event_types'] = array(
      '#title' => t('Event types as menu item.'),
      '#description' => t('Select the eventtypes as main menu items.'),
      '#type' => 'checkboxes',
      '#options' => $visibility_options,
      '#default_value' => variable_get('agenda_menu_event_types', $defaults),
    );

  }
	elseif ($delta == 'agenda-organiser-events') {
		$form['agenda_organiser_event_amount'] = array(
			'#title' => t('Amount of results to show'),
			'#type' => 'textfield',
			'#default_value' => variable_get('agenda_organiser_event_amount', 10),
			'#description' => t('Enter the number of results to show in the block.'),
		);
	}

	elseif ($delta == 'agenda-search-map') {
    $form['agenda_search_map_results_mode'] = array(
      '#title' => t('Show results as'),
      '#type' => 'radios',
      '#options' => array(
        t('Use paged results'),
        t('Use complete list as result')
      ),
      '#default_value' => variable_get('agenda_search_map_results_mode', 0)
    );
  }

  return $form;

}

/**
 * Implements hook_block_save().
 */
function culturefeed_agenda_block_save($delta, $edit) {

  if ($delta == 'agenda-related-activities') {

    variable_set('agenda_related_activities_context', $edit['agenda_related_activities_context']);
    variable_set('agenda_related_activities_range', $edit['agenda_related_activities_range']);
    variable_set('agenda_related_activities_extra_query', $edit['agenda_related_activities_extra_query']);
    variable_set('agenda_related_activities_sort', $edit['agenda_related_activities_sort']);
    variable_set('agenda_related_activities_sort_direction', '');
    variable_set('agenda_related_activities_total_items', $edit['agenda_related_activities_total_items']);

  }
  elseif ($delta == 'agenda-nearby-activities') {

    variable_set('agenda_nearby_activities_extra_query', $edit['agenda_nearby_activities_extra_query']);
    variable_set('agenda_nearby_activities_sort', $edit['agenda_nearby_activities_sort']);
    variable_set('agenda_nearby_activities_amount', $edit['agenda_nearby_activities_amount']);
    variable_set('agenda_nearby_activities_distance', $edit['agenda_nearby_activities_distance']);

  }
  elseif ($delta == 'agenda-search-block') {

    variable_set('agenda_search_block_domain_id', $edit['agenda_search_block_domain_id']);
    variable_set('agenda_search_block_submit_value', $edit['agenda_search_block_submit_value']);

    $fields = array();
    foreach ($edit['fields'] as $key => $field) {
      if ($field['enabled']) {
        $fields[$key] = $field['weight'];
      }
    }
    variable_set('culturefeed_agenda_search_block_active_fields', $fields);

  }
  elseif ($delta == 'agenda-actor-search') {

    variable_set('agenda_actor_autocomplete_categories', array_filter($edit['agenda_actor_autocomplete_categories']));
    variable_set('agenda_actor_search_visibility', array_filter($edit['agenda_actor_search_visibility']));

  }
  elseif ($delta == 'agenda-event-types') {

    variable_set('agenda_menu_event_types', array_filter($edit['agenda_menu_event_types']));

  }

	elseif ($delta == 'agenda-organiser-events') {

		variable_set('agenda_organiser_event_amount', $edit['agenda_organiser_event_amount']);
	}

  elseif ($delta == 'agenda-search-map') {
    variable_set('agenda_search_map_results_mode', $edit['agenda_search_map_results_mode']);
  }

}

/**
 * Implements hook_block_view().
 */
function culturefeed_agenda_block_view($delta) {

  module_load_include('inc', 'culturefeed_agenda', 'includes/blocks');
  $block = array();

  switch ($delta) {

    case 'agenda-related-activities':
      return culturefeed_agenda_block_related_activities();
    case 'agenda-nearby-activities':
      return culturefeed_agenda_block_nearby_activities();
    case 'agenda-search-block':
      $block['content'] = drupal_get_form('culturefeed_agenda_search_block_form');
      break;
    case 'actor-program':
      return culturefeed_agenda_block_actor_program();

    case 'production-program':
      return culturefeed_agenda_block_production_program();

    case 'agenda-actor-search':
      return culturefeed_agenda_block_actor_search();

    case  'agenda-event-types':
      return culturefeed_agenda_block_event_types();

		case 'agenda-organiser-events':
			return culturefeed_agenda_block_organiser_events();

    case 'agenda-search-map':
      return culturefeed_agenda_search_map();
  }

  return $block;

}

/**
 * Implements hook_culturefeed_search_ui_active_filters().
 */
function culturefeed_agenda_culturefeed_search_ui_active_filters($culturefeedFacetingComponent) {

  $query = drupal_get_query_parameters(NULL, array('q', 'page'));
  $path = current_path();
  $build = array();

  // Check the actor key.
  if (isset($query['actor'])) {
    $actor = culturefeed_agenda_actor_load($query['actor']);
    if ($actor) {
      $search_query = $query;
      unset($search_query['actor']);
      $url = url($path, array('query' => $search_query));
      $build['nearby'] = array(
        '#theme' => 'culturefeed_search_active_filters_item',
        '#label' => check_plain($actor->getTitle(culturefeed_search_get_preferred_language())),
        '#url' => $url,
      );
    }
  }

  if (isset($query['organiser']) && module_exists('culturefeed_pages')) {
    $organiser = culturefeed_pages_page_load($query['organiser']);
    if ($organiser) {
    $search_query = $query;
    unset($search_query['organiser']);
    $url = url($path, array('query' => $search_query));
    $build['organiser'] = array(
      '#theme' => 'culturefeed_search_active_filters_item',
      '#label' => check_plain($organiser->getName()),
      '#url' => $url,
    );
    }
  }

  return $build;

}

/**
 * Implements hook_url_outbound_alter().
 */
function culturefeed_agenda_url_outbound_alter(&$path, &$options, $original_path) {

  if ($path == 'agenda/search') {

    $type = '';
    $term_slugs = &drupal_static('culturefeed_search_term_slugs', array());
    $city_slugs = &drupal_static('culturefeed_search_city_slugs', array());

    $facets = isset($options['query']['facet']) ? $options['query']['facet'] : array();
    $location = isset($options['query']['location']) ? $options['query']['location'] : NULL;

    // Check if this url is going to filter on event type.
    if (!empty($facets['category_eventtype_id']) && is_array($facets['category_eventtype_id']) && isset($facets['category_eventtype_id'][0])) {

      // Only change url if there's 1 event type and it's not inversed.
      $inversed_category = strpos($facets['category_eventtype_id'][0], '!') === 0;
      if (count($facets['category_eventtype_id']) === 1 && !$inversed_category) {

        // Set the new path for this category. Keep the slug static cached.
        if (!isset($term_slugs[$facets['category_eventtype_id'][0]])) {
          $term_slugs[$facets['category_eventtype_id'][0]] = db_query('SELECT slug FROM {culturefeed_search_terms} WHERE tid = :tid AND language = :language', array(':tid' => $facets['category_eventtype_id'][0], ':language' => culturefeed_search_get_preferred_language()))->fetchField();
        }
        $type = $term_slugs[$facets['category_eventtype_id'][0]];
        $path = 'agenda/' . $type;

        // Remove the facet, and check if this was the only one.
        unset($options['query']['facet']['category_eventtype_id']);

      }
    }

    // Only do something if location is a city that has a postal.
    if (!empty($location)) {

      $city_parts = explode(' ', $location);

      // The search contains a zip code. Search city by zip + name.
      if (is_numeric($city_parts[0]) && isset($city_parts[1])) {

        // Search on city or city + (city)
        if (count($city_parts) == 2) {
          $name = $city_parts[1];
        }
        else {
          $name = $city_parts[1] . ' ' . $city_parts[2];
        }
        // Static cache the result.
        if (!isset($city_slugs[$city_parts[0]][$city_parts[1]])) {
          $city_slugs[$city_parts[0]][$city_parts[1]] = db_query('SELECT slug FROM {culturefeed_search_cities} WHERE zip = :zip AND name = :name', array(':zip' => $city_parts[0], ':name' => $name))->fetchField();
        }
        $location_slug = $city_slugs[$city_parts[0]][$city_parts[1]];
      }
      // The search contains only a city / region name. Search on full name.
      else {

        // Static cache it.
        if (!isset($term_slugs[$location])) {
          $term_slugs[$location] = db_query("SELECT slug FROM {culturefeed_search_terms} WHERE name = :name AND did = 'flandersregion'", array(':name' => $location))->fetchField();
        }
        $location_slug = $term_slugs[$location];

      }

      if (!empty($location_slug)) {
        unset($options['query']['location']);
        $type = $type ? : 'alle';
        $path = 'agenda/' . $type . '/' . $location_slug;
      }
    }

    // Rewrite facet on flanders region if there is only 1 region filtered.
    if (!empty($facets['category_flandersregion_id']) && is_array($facets['category_flandersregion_id']) && isset($facets['category_flandersregion_id'][0])) {

      // Only change url if there's 1 location and it's not inversed.
      $inversed_category = strpos($facets['category_flandersregion_id'][0], '!') === 0;
      if (count($facets['category_flandersregion_id']) === 1 && !$inversed_category) {
        if (!isset($term_slugs[$facets['category_flandersregion_id'][0]])) {
          $term_slugs[$facets['category_flandersregion_id'][0]] = db_query('SELECT slug FROM {culturefeed_search_terms} WHERE tid = :tid AND language = :language', array(':tid' => $facets['category_flandersregion_id'][0], ':language' => culturefeed_search_get_preferred_language()))->fetchField();
        }

        $type = $type ? : 'alle';
        $path = 'agenda/' . $type . '/' . $term_slugs[$facets['category_flandersregion_id'][0]];

        // Remove the facet.
        unset($options['query']['facet']['category_flandersregion_id']);
      }

    }

    // Rewrite facet on theme.
    if (!empty($facets['category_theme_id']) && is_array($facets['category_theme_id']) && isset($facets['category_theme_id'][0])) {

      // Only change url if there's 1 theme and it's not inversed.
      $inversed_category = strpos($facets['category_theme_id'][0], '!' === 0);
      if (count($facets['category_theme_id']) === 1 && !$inversed_category) {

        if (!isset($term_slugs[$facets['category_theme_id'][0]])) {
          $term_slugs[$facets['category_theme_id'][0]] = db_query('SELECT slug FROM {culturefeed_search_terms} WHERE tid = :tid AND language = :language', array(':tid' => $facets['category_theme_id'][0], ':language' => culturefeed_search_get_preferred_language()))->fetchField();
        }

        // Only change if this was a valid theme.
        if (isset($term_slugs[$facets['category_theme_id'][0]])) {
          $options['query']['theme'] = $term_slugs[$facets['category_theme_id'][0]];
        }

        unset($options['query']['facet']['category_theme_id']);

      }

    }

    // Always unset wregIds and regId.
    if (isset($options['query']['regId'])) {
      unset($options['query']['regId']);
    }

    // Make sure we leave no empty query data.
    // This one is needed, otherwise you can end with following url: agenda/sportactiviteit?&theme=fitness-gymnastiek-dans-en-vechtsport
    if (!empty($options['query'])) {

      foreach ($options['query'] as $key => $requested_query) {

        // If the element has subitems (facet query for example), check if subitems are not empty.
        if (is_array($requested_query)) {
          $has_sub_query = FALSE;
          foreach ($requested_query as $requested_subquery) {
            if (!empty($requested_subquery) || $requested_subquery === 0) {
              $has_sub_query = TRUE;
            }
          }

          if (!$has_sub_query) {
            unset($options['query'][$key]);
          }
        }
        elseif (empty($options['query'][$key]) && $options['query'][$key] !== 0) {
          unset($options['query'][$key]);
        }

      }

    }

  }

}

/**
 * Implements hook_url_inbound_alter().
 */
function culturefeed_agenda_url_inbound_alter(&$path, $original_path, $path_language) {

  // Catch old D6 urls.
  if ($path == 'agenda/r') {
    $path = 'agenda/search';
  }

  // Only check on agenda pages.
  if (arg(0, $path) == 'agenda') {

    // Always check if we need to alter the theme.
    if (isset($_GET['theme'])) {
      $category = culturefeed_search_get_category_by_slug($_GET['theme']);

      if ($category) {
        $_GET['facet']['category_theme_id'][] = $category->tid;
        $_REQUEST['facet']['category_theme_id'][] = $category->tid;
      }
      unset($_GET['theme']);
      unset($_REQUEST['theme']);

    }

    // A known search page, no need to alter the path.
    // We have a conflict with global redirect. So we will check here if a clean url
    // version of current requested url is available.
    $search_page = _culturefeed_search_ui_get_active_search_page();
    if ($search_page) {

      $query_string = drupal_get_query_parameters();
      if (empty($query_string)) {
        $query_string = NULL;
      }

      $request_path = $path;
      // Establish the language prefix that should be used, ie. the one that
      // drupal_goto() would use
      $options = array(
        'fragment' => '',
        'query' => $query_string,
        'absolute' => FALSE,
        'alias' => FALSE,
        'prefix' => '',
        'external' => FALSE,
      );

      // Check if we need to do a 301 redirect to the clean url.
      drupal_alter('url_outbound', $request_path, $options, $request_path);
      if ($request_path != $path) {
        drupal_goto($request_path, $options, 301);
      }

      return;
    }

    // If we are on a detail page, no need to alter the path.
    $object = culturefeed_search_get_active_object();
    if ($object) {
      return;
    }

    $rewrite = FALSE;

    // Check if we need to alter on category type.
    if (arg(1, $path) != 'alle') {
      if ($category = culturefeed_search_get_category_by_slug(arg(1, $path), 'eventtype')) {
        $_GET['facet']['category_eventtype_id'][] = $category->tid;
        $_REQUEST['facet']['category_eventtype_id'][] = $category->tid;
        $rewrite = TRUE;
      }
    }

    // Check if we need to alter location.
    $city_slug = arg(2, $path);
    if (!empty($city_slug)) {

      $city_parts = explode('-', $city_slug);
      $flanders_region = NULL;
      // Slug contains postal. Search city.
      if (is_numeric($city_parts[0])) {
        /*$city = culturefeed_search_get_city_by_slug($city_slug);
        if ($city) {
          $location = $city->zip . ' ' . $city->name;
        }*/
        $flanders_region = culturefeed_search_get_category_by_slug($city_slug, 'flandersregion');
        if ($flanders_region) {
          $rewrite = TRUE;
        }
      }
      // No postal, search flanders region.
      else {
        $flanders_region = culturefeed_search_get_category_by_slug($city_slug, 'flandersregion');
      }

      if ($flanders_region) {
        $_GET['facet']['category_flandersregion_id'][] = $flanders_region->tid;
        $_REQUEST['facet']['category_flandersregion_id'][] = $flanders_region->tid;
        $rewrite = TRUE;
      }

    }

    // When rewrite flag is set, change the path.
    if ($rewrite) {
      $path = 'agenda/search';
    }

  }

}

/**
 * Title callback for agenda detail pages.
 */
function culturefeed_agenda_detail_title(\CultuurNet\Search\ActivityStatsExtendedEntity $item) {

  $details = $item->getEntity()->getDetails()->getDetailByLanguage(culturefeed_search_get_preferred_language());

  if ($details) {
    return $details->getTitle();
  }

}

/**
 * Load an event from the api.
 */
function culturefeed_agenda_event_load($cdb_id) {
  return culturefeed_search_item_load($cdb_id, 'event');
}

/**
 * Load an actor from the api.
 */
function culturefeed_agenda_actor_load($cdb_id) {
  return culturefeed_search_item_load($cdb_id, 'actor');
}

/**
 * Load a production from the api.
 */
function culturefeed_agenda_production_load($cdb_id) {
  return culturefeed_search_item_load($cdb_id, 'production');
}

/**
 * Show a filter form for the page suggestions block.
 */
function culturefeed_agenda_nearby_activities_filter_form() {

  $location = '';
  $user_location = culturefeed_search_ui_get_user_location_cookie();
  if (isset($user_location->postal) && isset($user_location->city)) {
    $location = trim(check_plain($user_location->postal)) . ' ' . trim(check_plain($user_location->city));
  }

  $form = array();
  $form['location'] = array(
    '#type' => 'textfield',
    '#title' => t('Set location'),
    '#default_value' => $location,
    '#autocomplete_path' => 'autocomplete/culturefeed/city-suggestion',
    '#attributes' => array(
      'placeholder' => t('Zipcode or city'),
      'class' => array('location-form-autocomplete-submit')
  ));

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Ok'),
    '#id' => 'change-location-submit',
    '#ajax' => array(
      'callback' => 'culturefeed_agenda_nearby_activities_ajax_filter_submit',
    ),
  );

  return $form;
}

/**
 * Submit the ajax filter form for suggestions. Return the new list.
 */
function culturefeed_agenda_nearby_activities_ajax_filter_submit($form, $form_state) {

  $build = array();
  $build[] = array(
    '#markup' => culturefeed_agenda_get_nearby_activities_list(),
  );

  $commands = array(ajax_command_html('#nearby-activities', render($build)));

  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}
